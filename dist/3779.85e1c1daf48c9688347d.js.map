{"version":3,"file":"3779.85e1c1daf48c9688347d.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/WebAppModal.module.scss?73f6","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftOption.module.scss?a171","webpack://telegram-t/./src/components/main/premium/GiftOption.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/ui/TextArea.tsx","webpack://telegram-t/./src/components/ui/Draggable.tsx","webpack://telegram-t/./src/components/ui/Draggable.module.scss?804f","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/ui/SelectAvatar.module.scss?3384","webpack://telegram-t/./src/components/ui/SelectAvatar.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import type { ApiDimensions, ApiMessage } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media, ${MESSAGE_CONTENT_SELECTOR} .thumbnail`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useLayoutEffect, useCallback, useState } from '../lib/teact/teact';\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/environment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isInPictureInPicture, setIsInPictureInPicture] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsInPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      onLeave();\n      setIsInPictureInPicture(false);\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isInPictureInPicture];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import type {\n  ApiMessage, ApiChat, ApiUser, ApiDimensions,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  getVideoAvatarMediaHash,\n  getChatAvatarHash,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n  getMessageFileName,\n  getMessageDocument,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getMessageFileSize, getMessageActionPhoto,\n} from '../../../global/helpers';\nimport { useMemo } from '../../../lib/teact/teact';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport { MediaViewerOrigin } from '../../../types';\nimport { VIDEO_AVATAR_FULL_DIMENSIONS, AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiChat | ApiUser;\n  origin?: MediaViewerOrigin;\n  lastSyncTime?: number;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const actionPhoto = message ? getMessageActionPhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo || actionPhoto?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto || actionPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    if (actionPhoto && isVideoAvatar && isFull) {\n      return `videoAvatar${actionPhoto.id}?size=u`;\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, actionPhoto, isVideoAvatar, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    undefined,\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    !isVideo ? previewBlobUrl || pictogramBlobUrl || bestImageData : undefined\n  );\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto || actionPhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto || actionPhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n  }\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    actionPhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useSyncEffect from './useSyncEffect';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n            {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport { isUserId } from '../../global/helpers';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage, ApiPhoto, ApiChat, ApiUser,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport {\n  selectIsDownloading,\n  selectIsMessageProtected,\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n} from '../../global/selectors';\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  zoomLevelChange: number;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiChat | ApiUser;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  setZoomLevelChange: (change: number) => void;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  zoomLevelChange,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n  setZoomLevelChange,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const change = zoomLevelChange < 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change - 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const change = zoomLevelChange > 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change + 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleUpdate = useCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  }, [avatarPhoto, avatarOwnerId, selectMedia, updateProfilePhoto, updateChatPhoto]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (!message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'cancel' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'report',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useLayoutEffect, useState, useEffect } from '../lib/teact/teact';\nimport { IS_IOS } from '../util/environment';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreen(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || IS_IOS)) {\n      return;\n    }\n    safeRequestFullscreen(elRef.current);\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n    safeExitFullscreen();\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const video = elRef.current;\n    const listener = () => {\n      const isEnabled = Boolean(prop && document[prop]);\n      setIsFullscreen(isEnabled);\n      // In Firefox fullscreen video controls are not visible by default, so we force them manually\n      video!.controls = isEnabled;\n    };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && !IS_IOS) {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nexport const useFullscreenStatus = () => {\n  const [isFullscreen, setIsFullscreen] = useState(false);\n\n  useEffect(() => {\n    const listener = () => {\n      setIsFullscreen(checkIfFullscreen());\n    };\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n    };\n  }, []);\n\n  return isFullscreen;\n};\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n  return '';\n}\n\nexport function checkIfFullscreen() {\n  const fullscreenProp = getBrowserFullscreenElementProp();\n  return Boolean(fullscreenProp && document[fullscreenProp]);\n}\n\nexport function safeRequestFullscreen(video: HTMLVideoElement) {\n  if (video.requestFullscreen) {\n    video.requestFullscreen();\n  } else if (video.webkitRequestFullscreen) {\n    video.webkitRequestFullscreen();\n  } else if (video.webkitEnterFullscreen) {\n    video.webkitEnterFullscreen();\n  } else if (video.mozRequestFullScreen) {\n    video.mozRequestFullScreen();\n  }\n}\n\nexport function safeExitFullscreen() {\n  if (document.exitFullscreen) {\n    document.exitFullscreen();\n  } else if (document.mozCancelFullScreen) {\n    document.mozCancelFullScreen();\n  } else if (document.webkitCancelFullScreen) {\n    document.webkitCancelFullScreen();\n  } else if (document.webkitExitFullscreen) {\n    document.webkitExitFullscreen();\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick, isProtected,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport { captureEvents } from '../../util/captureEvents';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void ;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  const { isMobile } = useAppLayout();\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlaying ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/environment';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreen from '../../hooks/useFullscreen';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  areControlsVisible: boolean;\n  shouldCloseOnClick?: boolean;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\nconst MAX_LOOP_DURATION = 30; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n\n  const handleEnterFullscreen = useCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  }, [setMediaViewerHidden]);\n\n  const handleLeaveFullscreen = useCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  }, [setMediaViewerHidden]);\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const handleVideoMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleVideoLeave = useCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  }, [isPlaying]);\n\n  const handleClick = useCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) {\n      return;\n    }\n\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  }, [onClose, shouldCloseOnClick, togglePlayState, isClickDisabled]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if ((e.key === 'Enter' || e.key === ' ') && !isInPictureInPicture) {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const duration = videoRef.current?.duration || 0;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!IS_TOUCH_ENV ? handleVideoMove : undefined}\n      onMouseOut={!IS_TOUCH_ENV ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isGif || duration <= MAX_LOOP_DURATION}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={duration}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectChat, selectChatMessage, selectTabState, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\nimport buildClassName from '../../util/buildClassName';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setControlsVisible?: (isVisible: boolean) => void;\n  areControlsVisible: boolean;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    animationLevel,\n    areControlsVisible,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    setControlsVisible,\n    isMoving,\n  } = props;\n\n  const lang = useLang();\n\n  const isGhostAnimation = animationLevel === 2;\n\n  const {\n    isVideo,\n    isPhoto,\n    actionPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  const toggleControls = useCallback((isVisible) => {\n    setControlsVisible?.(isVisible);\n  }, [setControlsVisible]);\n\n  if (avatarOwner || actionPhoto) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            areControlsVisible={areControlsVisible}\n            toggleControls={toggleControls}\n            isProtected={isProtected}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = message.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          areControlsVisible={areControlsVisible}\n          isMediaViewerOpen={isOpen && isActive}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isHidden={IS_TOUCH_ENV ? !areControlsVisible : false}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = selectTabState(global).mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { AnimationLevel, MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  animationLevel: AnimationLevel;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n  zoomLevelChange: number;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  hasFooter,\n  zoomLevelChange,\n  animationLevel,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const isReleasedRef = useRef(false);\n  const [activeMediaId, setActiveMediaId] = useState<number | undefined>(mediaId);\n  const prevZoomLevelChange = usePrevious(zoomLevelChange);\n  const hasZoomChanged = prevZoomLevelChange !== undefined && prevZoomLevelChange !== zoomLevelChange;\n  const forceUpdate = useForceUpdate();\n  const [areControlsVisible, setControlsVisible] = useState(false);\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [selectMedia], DEBOUNCE_MESSAGE, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n  const setIsActiveDebounced = useDebouncedCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = isGif && !IS_IOS;\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!areControlsVisible);\n  }, [clickXThreshold, areControlsVisible, windowHeight, windowWidth]);\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION + 100);\n\n  useEffect(() => {\n    setActiveMediaId(mediaId);\n  }, [mediaId]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaId === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaId, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (animationLevel === 0) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      if (transformRef.current.scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (transformRef.current.scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ):[Transform, boolean, boolean] => {\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const absX = Math.abs(transformRef.current.x);\n      const absY = Math.abs(transformRef.current.y);\n      const {\n        scale,\n        x,\n        y,\n      } = transformRef.current;\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaId, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        transformRef.current.x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: transformRef.current.x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: transformRef.current?.scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (transformRef.current.scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        const { x, y, scale } = transformRef.current;\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const threshold = 10;\n        const tolerance = 1.5;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > threshold || absOffsetX / absOffsetY > tolerance) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > threshold || absOffsetY / absOffsetX > tolerance) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [\n    onClose,\n    setTransform,\n    getMediaId,\n    activeMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    animationLevel,\n    setIsMouseDown,\n    isHidden,\n    isFullscreen,\n  ]);\n\n  useEffect(() => {\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    const { scale } = transformRef.current;\n    const dir = zoomLevelChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [zoomLevelChange, hasZoomChanged, isHidden, isFullscreen]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n  const isMoving = isMouseDown && scale > 1;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {hasPrev && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-windowWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={prevMediaId}\n          />\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n        style={getAnimationStyle(offsetX, offsetY, scale)}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          animationLevel={animationLevel}\n          isActive={isActiveRef.current}\n          setControlsVisible={setControlsVisible}\n          isMoving={isMoving}\n          areControlsVisible={areControlsVisible && scale === 1}\n        />\n      </div>\n      {hasNext && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(windowWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isMoving={isMoving}\n            areControlsVisible={areControlsVisible}\n            mediaId={nextMediaId}\n          />\n        </div>\n      )}\n      {hasPrev && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n  isFallbackAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n  animationLevel: AnimationLevel;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isFallbackAvatar,\n  isAvatar,\n  message,\n  animationLevel,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, isMobile, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} animationLevel={animationLevel} withVideo />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} animationLevel={animationLevel} withVideo />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang(isFallbackAvatar ? 'lng_mediaview_profile_public_photo' : 'lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    const { animationLevel } = global.settings.byKey;\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n        animationLevel,\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return { animationLevel };\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n      animationLevel,\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport { getChatMediaMessageIds, isChatAdmin, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMediaSearch, selectTabState,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport { exitPictureInPictureIfNeeded } from '../../hooks/usePictureInPicture';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useMediaProps } from './hooks/useMediaProps';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2 && !shouldSkipHistoryAnimations;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n  const [zoomLevelChange, setZoomLevelChange] = useState<number>(1);\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    actionPhoto,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo || actionPhoto ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n    // Disable user selection if media viewer is open, to prevent accidental text selection\n    if (IS_TOUCH_ENV) {\n      document.body.classList.toggle('no-selection', isOpen);\n    }\n  }, [isMobile, isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useCallback(() => closeMediaViewer(), [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    handleClose();\n\n    if (!chatId || !mediaId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId: mediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId: mediaId });\n    }\n  }, [handleClose, isMobile, chatId, threadId, focusMessage, toggleChatInfo, mediaId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  }, [openForwardMenu, chatId, mediaId]);\n\n  const selectMedia = useCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  }, [avatarOwner?.id, chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const getMediaId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const index = mediaIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mediaIds.length - 1)) {\n      return mediaIds[index + direction];\n    }\n    return undefined;\n  }, [mediaIds]);\n\n  const handleBeforeDelete = useCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  }, [handleClose, mediaId, mediaIds, selectMedia]);\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n        isFallbackAvatar={isUserId(avatarOwner.id)\n          && (avatarOwner as ApiUser).photos?.[mediaId!].id === (avatarOwner as ApiUser).fullInfo?.fallbackPhoto?.id}\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n          zoomLevelChange={zoomLevelChange}\n          setZoomLevelChange={setZoomLevelChange}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        zoomLevelChange={zoomLevelChange}\n        isVideo={isVideo}\n        animationLevel={animationLevel}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    const { currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { animationLevel, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        isChatWithSelf,\n        canUpdateMedia,\n        animationLevel,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { animationLevel, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline\n      || origin === MediaViewerOrigin.Album\n      || origin === MediaViewerOrigin.SuggestedAvatar) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useRef, useCallback, useState, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChat, ApiTopic } from '../../api/types';\n\nimport { REM } from './helpers/mediaDimensions';\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport renderText from './helpers/renderText';\nimport { getCanPostInChat, isUserId } from '../../global/helpers';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport Transition from '../ui/Transition';\nimport TopicIcon from './TopicIcon';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  chatsById?: Record<string, ApiChat>;\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  chatsById,\n  search,\n  searchPlaceholder,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicContainerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicSearchRef = useRef<HTMLInputElement>(null);\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  const resetSearch = useCallback(() => {\n    onSearchChange('');\n  }, [onSearchChange]);\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const [topicIds, topics] = useMemo(() => {\n    const topicsResult = forumId ? chatsById?.[forumId].topics : undefined;\n    if (!topicsResult) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = topicsResult\n      ? Object.values(topicsResult).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chatsById![forumId!], topic.id)\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : topicsResult;\n\n    return [Object.keys(result).map(Number), result];\n  }, [chatsById, forumId, topicSearch]);\n\n  const handleHeaderBackClick = useCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  }, []);\n\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  }, [onSearchChange]);\n\n  const handleTopicSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  }, []);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById?.[chatId];\n      if (chat?.isForum) {\n        if (!chat.topics) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, '.ListItem-button', true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleClick = useCallback((e: React.MouseEvent, chatId: string) => {\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!chat.topics) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  }, [chatsById, loadTopics, onSelectChatOrUser, resetSearch]);\n\n  const handleTopicClick = useCallback((e: React.MouseEvent, topicId: number) => {\n    onSelectChatOrUser(forumId!, topicId);\n  }, [forumId, onSelectChatOrUser]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <i className=\"icon-arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={!topicIds ? 0 : topicIds.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {topicIds\n            ? topicIds.map((topicId, i) => (\n              <ListItem\n                key={`${forumId}_${topicId}`}\n                className=\"chat-item-clickable force-rounded-corners small-icon topic-item\"\n                style={`top: ${i * CHAT_HEIGHT_PX}px;`}\n                onClick={handleTopicClick}\n                clickArg={topicId}\n              >\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n                <div dir=\"auto\" className=\"fullName\">{renderText(topics[topicId].title)}</div>\n              </ListItem>\n            ))\n            : <Loading />}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map((id, i) => (\n              <ListItem\n                key={id}\n                className=\"chat-item-clickable force-rounded-corners small-icon\"\n                style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n                onClick={handleClick}\n                clickArg={id}\n              >\n                {isUserId(id) ? (\n                  <PrivateChatInfo\n                    status={id === currentUserId ? lang('SavedMessagesInfo') : undefined}\n                    userId={id}\n                  />\n                ) : (\n                  <GroupChatInfo chatId={id} />\n                )}\n              </ListItem>\n            ))}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slide-fade\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiChatType } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport { unique } from '../../util/iteratees';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n  sortChatIds,\n} from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: number) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), chatsById, undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, chatsById, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={renderingIds}\n      chatsById={chatsById}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    if (recipientId === currentUserId) {\n      forwardToSavedMessages();\n      showNotification({\n        message: lang(isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One'),\n      });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: threadId });\n    }\n  }, [currentUserId, forwardToSavedMessages, isManyMessages, lang, setForwardChatOrTopic, showNotification]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (selectTabState(global).forwardMessages.messageIds?.length || 0) > 1,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: number) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\n\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n  animationLevel: AnimationLevel;\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, animationLevel }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} animationLevel={animationLevel} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            className=\"confirm-dialog-button\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleJoinClick}\n          >\n            {isRequestNeeded ? requestToJoinText : joinText}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"XxZ7KIBUQzsSYf8KZiIc\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: TabState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport useWindowSize from '../../../hooks/useWindowSize';\n\nexport type PopupOptions = {\n  title: string;\n  message: string;\n  buttons: {\n    id: string;\n    type: 'default' | 'ok' | 'close' | 'cancel' | 'destructive';\n    text: string;\n  }[];\n};\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_setup_back_button';\n  eventData: {\n    is_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_link';\n  eventData: {\n    url: string;\n    try_instant_view?: boolean;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_open_invoice';\n  eventData: {\n    slug: string;\n  };\n} | {\n  eventType: 'web_app_trigger_haptic_feedback';\n  eventData: {\n    type: 'impact' | 'notification' | 'selection_change';\n    impact_style?: 'light' | 'medium' | 'heavy';\n    notification_type?: 'error' | 'success' | 'warning';\n  };\n} | {\n  eventType: 'web_app_set_background_color';\n  eventData: {\n    color: string;\n  };\n} | {\n  eventType: 'web_app_set_header_color';\n  eventData: {\n    color_key: 'bg_color' | 'secondary_bg_color';\n  };\n} | {\n  eventType: 'web_app_open_popup';\n  eventData: PopupOptions;\n} | {\n  eventType: 'web_app_setup_closing_behavior';\n  eventData: {\n    need_confirmation: boolean;\n  };\n} | {\n  eventType: 'web_app_open_scan_qr_popup';\n  eventData: {\n    text?: string;\n  };\n} | {\n  eventType: 'web_app_read_text_from_clipboard';\n  eventData: {\n    req_id: string;\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_request_phone' | 'web_app_close' | 'iframe_ready' | 'web_app_close_scan_qr_popup';\n  eventData: null;\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n    is_state_stable?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n      secondary_bg_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'invoice_closed';\n  eventData: {\n    slug: string;\n    status: 'paid' | 'cancelled' | 'pending' | 'failed';\n  };\n} | {\n  eventType: 'phone_requested';\n  eventData: {\n    phone_number: string;\n  };\n} | {\n  eventType: 'popup_closed';\n  eventData: {\n    button_id?: string;\n  };\n} | {\n  eventType: 'qr_text_received';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'clipboard_text_received';\n  eventData: {\n    req_id: string;\n    data: string | null;\n  };\n} | {\n  eventType: 'main_button_pressed' | 'back_button_pressed' | 'settings_button_pressed' | 'scan_qr_popup_closed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  onLoad?: () => void,\n) => {\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, [ref]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      if (data.eventType === 'web_app_read_text_from_clipboard') {\n        const { req_id: requestId } = data.eventData;\n        // eslint-disable-next-line no-null/no-null -- Required by spec\n        window.navigator.clipboard.readText().catch(() => null).then((text) => {\n          sendEvent({\n            eventType: 'clipboard_text_received',\n            eventData: {\n              req_id: requestId,\n              data: text,\n            },\n          });\n        });\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, onEvent, sendCustomStyle, sendEvent, sendTheme, sendViewport, onLoad, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\nimport type { PopupOptions, WebAppInboundEvent } from './hooks/useWebAppFrame';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCurrentChat, selectTabState, selectTheme, selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: TabState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    openInvoice,\n    setWebAppPaymentSlug,\n    showNotification,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [backgroundColor, setBackgroundColor] = useState(extractCurrentThemeParams().bg_color);\n  const [headerColor, setHeaderColor] = useState(extractCurrentThemeParams().bg_color);\n  const [confirmClose, setConfirmClose] = useState(false);\n  const [isCloseModalOpen, openCloseModal, closeCloseModal] = useFlag(false);\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n  const [popupParams, setPopupParams] = useState<PopupOptions | undefined>();\n  const { isMobile } = useAppLayout();\n  const prevPopupParams = usePrevious(popupParams);\n  const renderingPopupParams = popupParams || prevPopupParams;\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyToMessageId, threadId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = !queryId;\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_invoice') {\n      setWebAppPaymentSlug({\n        slug: eventData.slug,\n      });\n      openInvoice({\n        slug: eventData.slug,\n      });\n    }\n\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_link') {\n      const linkUrl = eventData.url;\n      window.open(linkUrl, '_blank', 'noreferrer');\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const themeParams = extractCurrentThemeParams();\n      const key = eventData.color_key;\n      const newColor = themeParams[key];\n      const color = validateHexColor(newColor) ? newColor : themeParams.bg_color;\n      setHeaderColor(color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setConfirmClose(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (!eventData.message.trim().length || !eventData.buttons?.length || eventData.buttons.length > 3) return;\n      setPopupParams(eventData);\n    }\n\n    if (eventType === 'web_app_open_scan_qr_popup') {\n      showNotification({\n        message: 'Scan QR code is not supported in this client yet',\n      });\n    }\n  }, [\n    bot, buttonText, closeWebApp, openInvoice, openTelegramLink, sendWebViewData, setWebAppPaymentSlug,\n    isPaymentModalOpen, showNotification,\n  ]);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent, markLoaded);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyToMessageId,\n      threadId,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleSettingsButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  const handleClose = useCallback(() => {\n    if (confirmClose) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  }, [confirmClose, openCloseModal, closeWebApp]);\n\n  const handlePopupClose = useCallback((buttonId?: string) => {\n    setPopupParams(undefined);\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  }, [sendEvent]);\n\n  const handlePopupModalClose = useCallback(() => {\n    handlePopupClose();\n  }, [handlePopupClose]);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, setWebAppPaymentSlug, webApp]);\n\n  const handleToggleClick = useCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: !attachBot,\n    });\n  }, [bot, attachBot, toggleAttachBot]);\n\n  const handleBackClick = useCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  }, [handleClose, isBackButtonVisible, sendEvent]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setConfirmClose(false);\n      closeCloseModal();\n      setPopupParams(undefined);\n      markUnloaded();\n    }\n  }, [closeCloseModal, isOpen, markUnloaded]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" style={`background-color: ${headerColor}`}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {attachBot?.hasSettings && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n    }\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor}`}\n    >\n      <Spinner className={buildClassName(styles.loadingSpinner, isLoaded && styles.hide)} />\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName(styles.frame, shouldDecreaseWebFrameSize && styles.withButton)}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && styles.visible,\n              shouldHideButton && styles.hidden,\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </>\n      )}\n      {confirmClose && (\n        <ConfirmDialog\n          isOpen={isCloseModalOpen}\n          onClose={closeCloseModal}\n          title={lang('lng_bot_close_warning_title')}\n          text={lang('lng_bot_close_warning')}\n          confirmHandler={closeWebApp}\n          confirmIsDestructive\n          confirmLabel={lang('lng_bot_close_warning_sure')}\n        />\n      )}\n      {renderingPopupParams && (\n        <Modal\n          isOpen={Boolean(popupParams)}\n          title={renderingPopupParams.title || NBSP}\n          onClose={handlePopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !renderingPopupParams.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {renderingPopupParams.message}\n          <div className=\"dialog-buttons mt-2\">\n            {renderingPopupParams.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handlePopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { botId } = webApp || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = selectTabState(global).payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"U2Fx70_Xnn6MxQAo6lWe\",\"close-icon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"closeIcon\":\"E9BBt8AWQ1LGCzqQYN0D\",\"state-back\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"stateBack\":\"Skbl2Bsgn5Ev9sxPJaZ1\",\"loading-spinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"loadingSpinner\":\"iHI2Sy6jZFDHhMiT5K_L\",\"hide\":\"F1D5Dm5CPeMaqWVDpYI1\",\"frame\":\"yFzw6MKed5SilXcABSY5\",\"with-button\":\"O33MOdec2Wd4r1fyRziT\",\"withButton\":\"O33MOdec2Wd4r1fyRziT\",\"main-button\":\"PzPxMQlmpQbPhl8MZSty\",\"mainButton\":\"PzPxMQlmpQbPhl8MZSty\",\"visible\":\"yLdyQH6R0YCJqkmkSvBH\",\"hidden\":\"CB9NVLPnqFkzbneBIuMs\",\"main-button-spinner\":\"z8CBciLaVx2qnhkzZO_c\",\"mainButtonSpinner\":\"z8CBciLaVx2qnhkzZO_c\",\"web-app-popup\":\"ift5IHKU51MeA7p6XdKh\",\"webAppPopup\":\"ift5IHKU51MeA7p6XdKh\",\"without-title\":\"Umnydwi7nysRWdcQItB8\",\"withoutTitle\":\"Umnydwi7nysRWdcQItB8\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp';\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id });\n  }, [markBotTrusted, bot]);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = currentType === 'game' ? lang('BotPermissionGameAlert', getUserFullName(currentBot))\n    : lang('BotOpenPageMessage', getUserFullName(currentBot));\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelBotTrustRequest}\n      confirmHandler={handleBotTrustAccept}\n      title={title}\n      textParts={renderText(text, ['br', 'simple_markdown', 'emoji'])}\n    />\n  );\n};\n\nexport default memo(BotTrustModal);\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiAttachBot } from '../../api/types';\n\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  bot?: ApiAttachBot;\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const [isWriteAllowed, setIsWriteAllowed] = useState(bot?.shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const prevBot = usePrevious(bot);\n  const renderingBot = bot || prevBot;\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed,\n    });\n  }, [confirmAttachBotInstall, isWriteAllowed]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsWriteAllowed(bot.shouldRequestWriteAccess ?? false);\n    }\n  }, [bot]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={renderingBot?.shortName}\n      confirmHandler={handleConfirm}\n    >\n      {lang('WebApp.AddToAttachmentText', renderingBot?.shortName)}\n      {renderingBot?.shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', renderingBot?.shortName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  deleteFolderDialogId?: number;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  deleteFolderDialogId,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder } = getActions();\n  const lang = useLang();\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    deleteChatFolder({ id: deleteFolderDialogId! });\n  }, [closeDeleteChatFolderModal, deleteChatFolder, deleteFolderDialogId]);\n\n  return (\n    <ConfirmDialog\n      isOpen={deleteFolderDialogId !== undefined}\n      onClose={closeDeleteChatFolderModal}\n      text={lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"qiAkShre9E6R3S_XXL9S\",\"floating-badge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floatingBadge\":\"gIcOQgrfw3soP3cK9s5Q\",\"floating-badge-triangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floatingBadgeTriangle\":\"Ip5PkcvyMOnN0RLpXLXO\",\"floating-badge-icon\":\"y7T3FpaFXDsnPGk6dPmg\",\"floatingBadgeIcon\":\"y7T3FpaFXDsnPGk6dPmg\",\"text\":\"X0zFAEpRoPWj1yE904xR\",\"floating-badge-value\":\"rQ6ZdKdWi4HVydX6qhWS\",\"floatingBadgeValue\":\"rQ6ZdKdWi4HVydX6qhWS\",\"left-text\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"leftText\":\"kuq7sjJF6mvCc4Y5CXpv X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-text\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightText\":\"QWqqObtxZyakBzakEoyh X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"right-value\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"rightValue\":\"TCdcdr_TxlgpCSBV0ePq X0zFAEpRoPWj1yE904xR X0zFAEpRoPWj1yE904xR\",\"left-value\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"leftValue\":\"FaVxkFCcMpBfLY74WJZv X0zFAEpRoPWj1yE904xR\",\"line\":\"slESyAvUqizX4_EIX_yg\",\"left\":\"lQi3xqxjvl2Owb4ES2SM\",\"right\":\"Dcv5uphsn2Sxpg3ROS_u\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\n// eslint-disable-next-line max-len\nconst TRIANGLE_SVG = '<svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\"/></svg>';\n\ntype OwnProps = {\n  floatingBadgeIcon?: string;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, floatingBadgeIcon)} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle} dangerouslySetInnerHTML={{ __html: TRIANGLE_SVG }} />\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"jeeOV_UYyl50GFLOzjGC\",\"title\":\"SVqE3gr2ekQUWfFT_Mvg\",\"description\":\"mCBNPstzrSlOQsz6rOtE\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WHiQiGCtWfjSlEysEelB\",\"wrapper\":\"WUpKHfqLbeZmhfYqqiko\",\"down\":\"MiGmL4xqBPkxmLim4Ai0\",\"frame\":\"xuhT9JHpFkVsTcUWeh4L\",\"video\":\"sLLJqCkdSug4bzEQrACs\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport useMedia from '../../../../hooks/useMedia';\nimport buildClassName from '../../../../util/buildClassName';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"NtJc4bt94t9fklIWC6wF\",\"arrow\":\"_rzXza87NHdAMH2TDKul\",\"right\":\"J4UYbae0Frt01jIavpB0\",\"arrow-hidden\":\"qd3rvhZma3JJmhdt07Ig\",\"arrowHidden\":\"qd3rvhZma3JJmhdt07Ig\",\"dot\":\"eCgEFkp07vgaUGwymYAQ\",\"medium\":\"AIpVWjJc47egZ8ATaC3n\",\"small\":\"MnRKztu0OZTyIywGLMc6\",\"invisible\":\"boSFbatyzatdw70J7mpu\",\"active\":\"nlCmVncFkKVtsawWqcfw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './SliderDots.module.scss';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport Button from '../ui/Button';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dVn5gk50tXn1EiI4kJFJ\",\"sticker\":\"PIYKt4xxOUBpRjRu0b4q\",\"effect-sticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\",\"effectSticker\":\"JLzWnq8to4W24wBGmbyt PIYKt4xxOUBpRjRu0b4q\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { ApiSticker } from '../../../../api/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\nimport useMedia from '../../../../hooks/useMedia';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: NoneToVoidFunction;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useCallback(() => {\n    onClick(realIndex);\n  }, [onClick, realIndex]);\n\n  const handleEnded = useCallback(() => {\n    inanimate();\n    onEnded();\n  }, [inanimate, onEnded]);\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useCallback((i: number) => {\n    setOffset(-i);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setTimeout(() => {\n      setOffset((current) => cycleRestrict(renderedStickers.length, current + 1));\n    }, ENDED_DELAY);\n  }, [renderedStickers.length]);\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {renderedStickers?.map((l, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={l}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QfngIllOc1THaTQiJf7h\",\"button\":\"n8tTb600de2uZKGkyw67\",\"button-content\":\"eZLuJy6dL4ekVllaRcCm\",\"buttonContent\":\"eZLuJy6dL4ekVllaRcCm\",\"back-button\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"backButton\":\"ZTIpWD6Zrj1U7rnGvrlD\",\"white-back-button\":\"E42Dy7DFLAxvj8HE4GAD\",\"whiteBackButton\":\"E42Dy7DFLAxvj8HE4GAD\",\"content\":\"JMdhJYW94Mas4JDye486\",\"frame\":\"fEQZ2fyO9g6L1v8QJUCJ\",\"slide\":\"xkC9BFxv7RkSwbPe4RMb\",\"limits\":\"zngeFAwxdlVJZY876fHc\",\"limits-content\":\"le7Qv9QkHlO3qdK0Hs_g\",\"limitsContent\":\"le7Qv9QkHlO3qdK0Hs_g\",\"header\":\"Mw81cOCIGy8KGn9VokFA\",\"no-header-border\":\"tRvcw256KSHRqgSj5uGX\",\"noHeaderBorder\":\"tRvcw256KSHRqgSj5uGX\",\"preview\":\"EXGFQjwHmQxjvMLbYtS9\",\"title\":\"eEYA2lXPy_DUKe8JKHiP\",\"description\":\"TVO7LjkV_yHUGIu5PXCA\",\"footer\":\"EKr_FVmiDSwhUxouhaqB\",\"no-footer-border\":\"H8z5Q6gsuqeCy82HFlyX\",\"noFooterBorder\":\"H8z5Q6gsuqeCy82HFlyX\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPremiumPromo } from '../../../api/types';\nimport type { ApiLimitType, GlobalState } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\nimport SliderDots from '../../common/SliderDots';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<string, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n};\n\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\nconst PREMIUM_BOTTOM_VIDEOS: string[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n];\n\ntype ApiLimitTypeWithoutUpload = Exclude<ApiLimitType, 'uploadMaxFileparts'>;\n\nconst LIMITS_ORDER: ApiLimitTypeWithoutUpload[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n];\n\nconst LIMITS_TITLES: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeWithoutUpload, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  onBack: VoidFunction;\n  initialSection: string;\n  promo: ApiPremiumPromo;\n  onClickSubscribe: (startParam?: string) => void;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  onBack,\n  onClickSubscribe,\n  isPremium,\n  limits,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  function handleClick() {\n    onClickSubscribe(initialSection);\n  }\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = e.currentTarget;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n    e.currentTarget.style.setProperty('--scroll-progress', progress.toString());\n    e.currentTarget.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = e.currentTarget.querySelector(`#premium_feature_preview_video_${reverseIndex}`);\n    prevElement?.classList.toggle('reverse', false);\n    reverseElement?.classList.toggle('reverse', true);\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = PREMIUM_FEATURE_SECTIONS.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, initialSection, prevInitialSection, startScrolling, stopScrolling]);\n\n  const handleSelectSlide = useCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await fastSmoothScrollHorizontal(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  }, [startScrolling, stopScrolling]);\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {PREMIUM_FEATURE_SECTIONS.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        <Button\n          className={buildClassName(styles.button)}\n          isShiny={!isPremium}\n          withPremiumGradient={!isPremium}\n          onClick={isPremium ? onBack : handleClick}\n        >\n          {isPremium\n            ? lang('OK')\n            : lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"PEnE7xWTMwTPGmhubmj6\",\"text\":\"U4UYSH7uHW3k4FlqBefm\",\"header\":\"Jdlm3dtJ8gOIY0x0u2d4\",\"description\":\"cE44My72bdvMJna9mgoc\",\"icon\":\"mxF3NdPgAi_H0ZFgNEtw\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport renderText from '../../common/helpers/renderText';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  title: string;\n  text: string;\n  onClick: VoidFunction;\n  index: number;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n];\n\nconst PremiumFeatureItem: FC<OwnProps> = ({\n  icon,\n  title,\n  text,\n  index,\n  onClick,\n}) => {\n  return (\n    <ListItem buttonClassName={styles.root} onClick={onClick}>\n      <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: ${COLORS[index]}`} />\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JJNHc_FZuydBNBIHK9xC\",\"transition\":\"Q05gUm0HCMtSoeX2HVGw\",\"button\":\"Fb3VVHNrypZ3lhYfSVI_\",\"main\":\"E9_LJ9RqAHTj8h84EROt\",\"logo\":\"Vaf41aTAoSwl_e_cZhah\",\"header-text\":\"J2z1gqvfQu5kqV_UP8US\",\"headerText\":\"J2z1gqvfQu5kqV_UP8US\",\"description\":\"PXg8sU2cfdeysJXctlpB\",\"list\":\"LlPAfJpL066su4P2NFmh\",\"no-button\":\"wpPtJKCqTdOGkKoh7KTo\",\"noButton\":\"wpPtJKCqTdOGkKoh7KTo\",\"header\":\"Rwuf1efaEfZ13AD5XbCB\",\"hidden-header\":\"NV7fN3j69oFZEJu7ejG8\",\"hiddenHeader\":\"NV7fN3j69oFZEJu7ejG8\",\"close-button\":\"TyuYAZecpI2K_1i3B5XO\",\"closeButton\":\"TyuYAZecpI2K_1i3B5XO\",\"premium-header-text\":\"jA_DV7G5VJo8xGOe0otF\",\"premiumHeaderText\":\"jA_DV7G5VJo8xGOe0otF\",\"footer-text\":\"yVkdTScCEhH3EQMQiA42\",\"footerText\":\"yVkdTScCEhH3EQMQiA42\",\"primary-footer-text\":\"MQbFSG2o_R8rjKDsqs8R\",\"primaryFooterText\":\"MQbFSG2o_R8rjKDsqs8R\",\"footer\":\"FApXoTPpasib6Np5Uxpt\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumPromo, ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_SECTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium, selectUser } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName } from '../../../global/helpers';\n\nimport useLang from '../../../hooks/useLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport Transition from '../../ui/Transition';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\n\nimport styles from './PremiumMainModal.module.scss';\n\nconst LIMIT_ACCOUNTS = 4;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<string, string> = {\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  isClosing?: boolean;\n  fromUser?: ApiUser;\n  toUser?: ApiUser;\n  initialSection?: string;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: string[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isClosing,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<string | undefined>(initialSection);\n\n  const handleOpen = useCallback((section: string | undefined) => {\n    return () => {\n      setCurrentSection(section);\n    };\n  }, []);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  function handleClickWithStartParam(startParam?: string) {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  }\n\n  function handleClick() {\n    handleClickWithStartParam();\n  }\n\n  const showConfetti = useCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  }, [isOpen, requestConfetti]);\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  if (!promo) return undefined;\n\n  // TODO Support all subscription options\n  const month = promo.options.find((option) => option.months === 1)!;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities(promo.statusText, promo.statusEntities)}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      // eslint-disable-next-line react/jsx-no-bind\n      onCloseAnimationEnd={() => closePremiumModal({ isClosed: true })}\n      onClose={closePremiumModal}\n      isOpen={isOpen && !isClosing}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n            <img className={styles.logo} src={PremiumLogo} alt=\"\" />\n            <h2 className={styles.headerText}>\n              {renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    onClick={handleOpen(section)}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && (\n              <div className={styles.footer}>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', formatCurrency(Number(month.amount), month.currency, lang.code))}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleOpen(undefined)}\n            promo={promo}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isClosing: premiumModal?.isClosing,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser: premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"c43s0Q6_xgGlM8sZxQ7Q\",\"active\":\"PjYaF42Oe55WgPpTP6Od\",\"input\":\"r03M3Tzd52_D2GCAdabK\",\"content\":\"oL_26LDnHDwJRxqKF1Kn\",\"month\":\"JmEuBQ4mFzu1MiFV5qSB\",\"perMonth\":\"hssGd7AUhDhhG2_aXqe9\",\"amount\":\"mhc9AgOUiNT2QMcErpQe\",\"discount\":\"WCXGWHYNQh8lg2rIWehC\"};","import type { ChangeEvent } from 'react';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption } from '../../../api/types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './GiftOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  onChange: (month: number) => void;\n};\n\nconst GiftOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount, onChange,\n}) => {\n  const lang = useLang();\n\n  const { months, amount, currency } = option;\n  const perMonth = Math.floor(amount / months);\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label className={buildClassName(styles.wrapper, checked && styles.active)} dir={lang.isRtl ? 'rtl' : undefined}>\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"gift_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>{lang('Months', months)}</div>\n        <div className={styles.perMonth}>\n          {lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n          {Boolean(discount) && (\n            <span className={styles.discount} title={lang('GiftDiscount')}> &minus;{discount}% </span>\n          )}\n        </div>\n        <div className={styles.amount}>{formatCurrency(amount, currency, lang.code)}</div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiftOption);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiPremiumGiftOption, ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState, selectUser } from '../../../global/selectors';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Avatar from '../../common/Avatar';\nimport GiftOption from './GiftOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  gifts?: ApiPremiumGiftOption[];\n  monthlyCurrency?: string;\n  monthlyAmount?: number;\n  animationLevel: AnimationLevel;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  user,\n  gifts,\n  monthlyCurrency,\n  monthlyAmount,\n  animationLevel,\n}) => {\n  const { openPremiumModal, closeGiftPremiumModal, openUrl } = getActions();\n\n  const lang = useLang();\n  const renderedUser = useCurrentOrPrev(user, true);\n  const renderedGifts = useCurrentOrPrev(gifts, true);\n  const [selectedOption, setSelectedOption] = useState<number | undefined>();\n  const firstGift = renderedGifts?.[0];\n  const fullMonthlyAmount = useMemo(() => {\n    if (!renderedGifts || renderedGifts.length === 0 || !firstGift) {\n      return undefined;\n    }\n\n    const cheaperGift = renderedGifts.reduce((acc, gift) => {\n      return gift.amount < firstGift?.amount ? gift : firstGift;\n    }, firstGift);\n\n    return cheaperGift.currency === monthlyCurrency && monthlyAmount\n      ? monthlyAmount\n      : Math.floor(cheaperGift.amount / cheaperGift.months);\n  }, [firstGift, renderedGifts, monthlyAmount, monthlyCurrency]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedOption(firstGift?.months);\n    }\n  }, [firstGift?.months, isOpen]);\n\n  const selectedGift = useMemo(() => {\n    return renderedGifts?.find((gift) => gift.months === selectedOption);\n  }, [renderedGifts, selectedOption]);\n\n  const handleSubmit = useCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    closeGiftPremiumModal();\n    openUrl({ url: selectedGift.botUrl });\n  }, [closeGiftPremiumModal, openUrl, selectedGift]);\n\n  const handlePremiumClick = useCallback(() => {\n    openPremiumModal();\n  }, [openPremiumModal]);\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  return (\n    <Modal\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <Avatar user={renderedUser} size=\"jumbo\" className={styles.avatar} animationLevel={animationLevel} withVideo />\n        <h2 className={styles.headerText}>\n          {lang('GiftTelegramPremiumTitle')}\n        </h2>\n        <p className={styles.description}>\n          {renderText(\n            lang('GiftTelegramPremiumDescription', getUserFirstOrLastName(renderedUser)),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n\n        <div className={styles.options}>\n          {renderedGifts?.map((gift) => (\n            <GiftOption\n              key={gift.amount}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={gift.months === selectedOption}\n              onChange={setSelectedOption}\n            />\n          ))}\n        </div>\n\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      <Button className={styles.button} isShiny disabled={!selectedOption} onClick={handleSubmit}>\n        {lang(\n          'GiftSubscriptionFor',\n          selectedGift && formatCurrency(Number(selectedGift.amount), selectedGift.currency, lang.code),\n        )}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { forUserId, monthlyCurrency, monthlyAmount } = selectTabState(global).giftPremiumModal || {};\n  const user = forUserId ? selectUser(global, forUserId) : undefined;\n  const gifts = user ? user.fullInfo?.premiumGifts : undefined;\n\n  return {\n    user,\n    gifts,\n    monthlyCurrency,\n    monthlyAmount: monthlyAmount ? Number(monthlyAmount) : undefined,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"K80So3B9potKGNvwdtYE\",\"closeButton\":\"dxx424IZDNuP1OLbUIve\",\"avatar\":\"qJgJ7R5NJVmAxBjT5LxT\",\"headerText\":\"eqCNa8zBoMroKcepfXyE\",\"description\":\"MtYhgDChavNfKIUAJPzt\",\"premiumFeatures\":\"J0hST5xsC45ZolfGpbDc\",\"options\":\"HyfHjS1vAds31eFcSpDg\",\"button\":\"sSXm9RjIQSsVFi0D1nEd\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport renderText from '../../../common/helpers/renderText';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport { getActions, withGlobal } from '../../../../global';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport useFlag from '../../../../hooks/useFlag';\n\nimport Modal from '../../../ui/Modal';\nimport Button from '../../../ui/Button';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'icon-chat-badge',\n  uploadMaxFileparts: 'icon-file-badge',\n  dialogFilters: 'icon-folder-badge',\n  dialogFolderPinned: 'icon-pin-badge',\n  channelsPublic: 'icon-link-badge',\n  channels: 'icon-chats-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon)} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.subscribeButton)}\n          isShiny\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <i className={buildClassName(styles.buttonIcon, 'icon-double-badge')} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iz5RJvcQyNNDQzKfXQbN\",\"limit-compare\":\"az3lXhmlMfZfIQ_81jog\",\"limitCompare\":\"az3lXhmlMfZfIQ_81jog\",\"limit-badge\":\"womlEQglVV1w8ltVa6PQ\",\"limitBadge\":\"womlEQglVV1w8ltVa6PQ\",\"limit-value\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limitValue\":\"QC8Xe4ShGc_q82s4Tjmg\",\"limit-icon\":\"q8SgjqQqlOVMSofzhdwh\",\"limitIcon\":\"q8SgjqQqlOVMSofzhdwh\",\"dialog-buttons\":\"DgRFl7StCs4fhROb7CKH\",\"dialogButtons\":\"DgRFl7StCs4fhROb7CKH\",\"subscribe-button\":\"Twnx_5clE9fKNOMo7lXf\",\"subscribeButton\":\"Twnx_5clE9fKNOMo7lXf\",\"button-icon\":\"BW05mF5k9uq5qBi_BYzg\",\"buttonIcon\":\"BW05mF5k9uq5qBi_BYzg\"};","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER, FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, STICKER_SIZE_PICKER,\n} from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport StickerButton from '../../common/StickerButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Button from '../../ui/Button';\n\nimport grey from '../../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix?: string;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideRecentHeader?: boolean;\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  isStatusPicker,\n  isCurrentUserPremium,\n  shouldHideRecentHeader,\n  withDefaultTopicIcon,\n  withDefaultStatusIcon,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(ITEMS_PER_ROW_FALLBACK);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const stickerMarginPx = isMobile ? 8 : 16;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useCallback(() => {\n    if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  }, [clearRecentCustomEmoji, clearRecentStickers, closeConfirmModal, isEmoji]);\n\n  const handleAddClick = useCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  }, [isCurrentUserPremium, isPremiumSet, openPremiumModal, stickerSet, toggleStickerSet]);\n\n  const handleDefaultTopicIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const handleDefaultStatusIconClick = useCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  }, [onStickerSelect]);\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useCallback((width: number) => {\n    if (!width) return ITEMS_PER_ROW_FALLBACK;\n\n    return Math.floor(width / (itemSize + margin));\n  }, [itemSize, margin]);\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  }, [calculateItemsPerRow]);\n  useResizeObserver(ref, handleResize);\n\n  useLayoutEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isRecent && isEmoji && !isCurrentUserPremium\n    && stickerSet.stickers?.some(({ isFree }) => !isFree);\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow) * (itemSize + margin);\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * (itemSize + margin);\n\n  const shouldHideHeader = isRecent && shouldHideRecentHeader;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix || 'sticker-set'}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className=\"symbol-set-name\">\n            {isLocked && <i className=\"symbol-set-locked-icon icon-lock-badge\" />}\n            {stickerSet.title}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon-close\" onClick={openConfirmModal} />\n          )}\n          {!isRecent && isEmoji && !isInstalled && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {isPremiumSet && isLocked ? lang('Unlock') : lang('Add')}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <i className=\"icon-premium\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.stickers && stickerSet.stickers\n          .slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersection}\n                noAnimate={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                isCurrentUserPremium={isCurrentUserPremium}\n                sharedCanvasRef={canvasRef}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang('ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","// extracted by mini-css-extract-plugin\nexport default {\"video\":\"h6jE3TEaqlzbs0ro0J2_\"};","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { getStickerPreviewHash } from '../../../global/helpers';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBoundsInSharedCanvas from '../../../hooks/useBoundsInSharedCanvas';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noAnimate?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noAnimate,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { hasThumbnail, isLottie, isVideos: isVideo } = stickerSet;\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n\n  const shouldFallbackToStatic = stickerSet.stickers && isVideo && !IS_WEBM_SUPPORTED;\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || isLottie) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const bounds = useBoundsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className=\"sticker-set-cover\">\n      {isReady ? (\n        isLottie ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size || bounds.size}\n            play={isIntersecting && !noAnimate}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={bounds.coords}\n          />\n        ) : (isVideo && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={isIntersecting && !noAnimate}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            className={transitionClassNames}\n            alt=\"\"\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport {\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  loadAndPlay: boolean;\n  isStatusPicker?: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  recentStatusEmojis,\n  stickerSetsById,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isStatusPicker,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  onCustomEmojiSelect,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith(idPrefix)) {\n        return;\n      }\n\n      const index = Number(id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    if (!addedCustomEmojiIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets: StickerSetOrRecent[] = [];\n\n    if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack.stickers?.length) {\n        const stickers = (defaultStatusIconsPack.stickers || []).concat(recentCustomEmojis || []);\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true as true,\n      });\n    }\n\n    const setIdsToDisplay = unique(addedCustomEmojiIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, defaultStatusIconsId, lang, defaultTopicIconsId,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, [idPrefix]);\n\n  const handleEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', 'CustomEmojiPicker', className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            idPrefix={idPrefix}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            isSavedMessages={isSavedMessages}\n            isStatusPicker={isStatusPicker}\n            shouldHideRecentHeader={withDefaultTopicIcons || isStatusPicker}\n            withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n            withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleEmojiSelect}\n            onContextMenuOpen={onContextMenuOpen}\n            onContextMenuClose={onContextMenuClose}\n            onContextMenuClick={onContextMenuClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n\n    return {\n      customEmojisById: !isStatusPicker ? customEmojisById : undefined,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n    };\n  },\n)(CustomEmojiPicker));\n","import type { RefObject } from 'react';\nimport React, {\n  useCallback, memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport CustomEmojiPicker from '../../middle/composer/CustomEmojiPicker';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: RefObject<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isStatusPicker\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"XWSv0Pf1SKleWNyX04yO\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport SafeLink from './SafeLink';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('SponsoredMessageInfo')}\n    >\n      <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n      <p>\n        <SafeLink\n          url={lang('SponsoredMessageAlertLearnMoreUrl')}\n          text={lang('SponsoredMessageAlertLearnMoreUrl')}\n        />\n      </p>\n      <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Close')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <div className=\"dialog-buttons-column\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        {canPinForAll && (\n          <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n            {contactName\n              ? renderText(lang('Conversation.PinMessagesFor', contactName))\n              : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          </Button>\n        )}\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  function handleCopy(e: KeyboardEvent) {\n    if (!isActive) {\n      return;\n    }\n\n    e.preventDefault();\n    copySelectedMessages();\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  selectCanDeleteSelectedMessages, selectCurrentChat, selectTabState, selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds! });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName\n              ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n              : lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = selectTabState(global).selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList, selectTabState,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n\n  const handleExitMessageSelectMode = useCallback(() => {\n    exitMessageSelectMode();\n  }, [exitMessageSelectMode]);\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={handleExitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && canForwardMessages && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && !hasProtectedMessage && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {!hasProtectedMessage && (\n              renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n            )}\n            {canDeleteMessages && (\n              renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)\n            )}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = tabState.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const handleCloseSeenByModal = useCallback(() => {\n    closeSeenByModal();\n  }, [closeSeenByModal]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\nimport { isSameReaction, getReactionUniqueKey } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useFlag from '../../hooks/useFlag';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n  animationLevel: AnimationLevel;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n  animationLevel,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ userId }) => userId);\n    }\n    return unique(reactors?.reactions.map(({ userId }) => userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionUniqueKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (userId) => {\n                const user = usersById[userId];\n                const userReactions = reactors?.reactions.filter((reactor) => reactor.userId === userId);\n                const items: React.ReactNode[] = [];\n                userReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n                  items.push(\n                    <ListItem\n                      key={`${userId}-${getReactionUniqueKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(userId)}\n                    >\n                      <Avatar user={user} size=\"small\" animationLevel={animationLevel} withVideo />\n                      <FullNameTitle peer={user} withEmojiStatus />\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n      animationLevel: global.settings.byKey.animationLevel,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" withVideoAvatar />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} animationLevel={animationLevel} withVideo />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n    const { animationLevel } = global.settings.byKey;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n      animationLevel,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageIsSpoiler,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n  animationLevel?: AnimationLevel;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  animationLevel,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n        withVideo\n        animationLevel={animationLevel}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={privateChatUser || chat}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n      />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      animationLevel: global.settings.byKey.animationLevel,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div\n          className=\"chat-selection no-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = selectTabState(global).globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport {\n  selectChat,\n} from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport ListItem from '../../ui/ListItem';\nimport TopicIcon from '../../common/TopicIcon';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openChat } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      openChat({ id: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      lastSyncTime,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectIsPremiumPurchaseBlocked, selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\nimport PremiumIcon from '../../common/PremiumIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n  canBuyPremium?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n  canBuyPremium,\n}) => {\n  const {\n    loadProfilePhotos,\n    loadAuthorizations,\n    openPremiumModal,\n  } = getActions();\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SettingsMain));\n","import React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^\\D([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length === 0 || (\n    username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username)\n  );\n}\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n\n    const isValid = isUsernameValid(newUsername);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent, FormEvent, RefObject } from 'react';\nimport useLang from '../../hooks/useLang';\nimport buildClassName from '../../util/buildClassName';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\ntype OwnProps = {\n  ref?: RefObject<HTMLTextAreaElement>;\n  id?: string;\n  className?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  success?: string;\n  disabled?: boolean;\n  readOnly?: boolean;\n  placeholder?: string;\n  autoComplete?: string;\n  maxLength?: number;\n  maxLengthIndicator?: string;\n  tabIndex?: number;\n  inputMode?: 'text' | 'none' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\n  onChange?: (e: ChangeEvent<HTMLTextAreaElement>) => void;\n  onInput?: (e: FormEvent<HTMLTextAreaElement>) => void;\n  onKeyPress?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onKeyDown?: (e: React.KeyboardEvent<HTMLTextAreaElement>) => void;\n  onBlur?: (e: React.FocusEvent<HTMLTextAreaElement>) => void;\n  onPaste?: (e: React.ClipboardEvent<HTMLTextAreaElement>) => void;\n  noReplaceNewlines?: boolean;\n};\n\nconst TextArea: FC<OwnProps> = ({\n  ref,\n  id,\n  className,\n  value,\n  label,\n  error,\n  success,\n  disabled,\n  readOnly,\n  placeholder,\n  autoComplete,\n  inputMode,\n  maxLength,\n  maxLengthIndicator,\n  tabIndex,\n  onChange,\n  onInput,\n  onKeyPress,\n  onKeyDown,\n  onBlur,\n  onPaste,\n  noReplaceNewlines,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  let textareaRef = useRef<HTMLTextAreaElement>(null);\n  if (ref) {\n    textareaRef = ref;\n  }\n\n  const lang = useLang();\n  const labelText = error || success || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error ? 'error' : success && 'success',\n    disabled && 'disabled',\n    readOnly && 'disabled',\n    labelText && 'with-label',\n    className,\n  );\n\n  useEffect(() => {\n    const textarea = textareaRef.current;\n    if (!textarea) return;\n    textarea.style.height = '0';\n    textarea.style.height = `${textarea.scrollHeight}px`;\n  }, []);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    if (!noReplaceNewlines) {\n      const previousSelectionEnd = e.currentTarget.selectionEnd;\n      // TDesktop replaces newlines with spaces as well\n      e.currentTarget.value = e.currentTarget.value.replace(/\\n/g, ' ');\n      e.currentTarget.selectionEnd = previousSelectionEnd;\n    }\n    e.currentTarget.style.height = '0';\n    e.currentTarget.style.height = `${e.currentTarget.scrollHeight}px`;\n    onChange?.(e);\n  }, [noReplaceNewlines, onChange]);\n\n  return (\n    <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <textarea\n        ref={textareaRef}\n        className=\"form-control\"\n        id={id}\n        dir=\"auto\"\n        value={value || ''}\n        tabIndex={tabIndex}\n        placeholder={placeholder}\n        maxLength={maxLength}\n        autoComplete={autoComplete}\n        inputMode={inputMode}\n        disabled={disabled}\n        readOnly={readOnly}\n        onChange={handleChange}\n        onInput={onInput}\n        onKeyPress={onKeyPress}\n        onKeyDown={onKeyDown}\n        onBlur={onBlur}\n        onPaste={onPaste}\n        aria-label={labelText}\n      />\n      {labelText && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n      {maxLengthIndicator && (\n        <div className=\"max-length-indicator\">{maxLengthIndicator}</div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(TextArea);\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './Draggable.module.scss';\nimport useLang from '../../hooks/useLang';\nimport buildStyle from '../../util/buildStyle';\n\ntype TPoint = {\n  x: number;\n  y: number;\n};\n\ntype DraggableState = {\n  isDragging: boolean;\n  origin: TPoint;\n  translation: TPoint;\n  width?: number;\n  height?: number;\n};\n\ntype OwnProps = {\n  children: React.ReactNode;\n  onDrag: (translation: TPoint, id: number | string) => void;\n  onDragEnd: NoneToVoidFunction;\n  id: number | string;\n  style?: string;\n  knobStyle?: string;\n  isDisabled?: boolean;\n};\n\nconst ZERO_POINT: TPoint = { x: 0, y: 0 };\n\nconst Draggable: FC<OwnProps> = ({\n  children,\n  id,\n  onDrag,\n  onDragEnd,\n  style: externalStyle,\n  knobStyle,\n  isDisabled,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const [state, setState] = useState<DraggableState>({\n    isDragging: false,\n    origin: ZERO_POINT,\n    translation: ZERO_POINT,\n  });\n\n  const handleMouseDown = (e: React.MouseEvent | React.TouchEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const { x, y } = getClientCoordinate(e);\n\n    setState({\n      ...state,\n      isDragging: true,\n      origin: { x, y },\n      width: ref.current?.offsetWidth,\n      height: ref.current?.offsetHeight,\n    });\n  };\n\n  const handleMouseMove = useCallback((e: MouseEvent | TouchEvent) => {\n    const { x, y } = getClientCoordinate(e);\n\n    const translation = {\n      x: x - state.origin.x,\n      y: y - state.origin.y,\n    };\n\n    setState((current) => ({\n      ...current,\n      translation,\n    }));\n\n    onDrag(translation, id);\n  }, [id, onDrag, state.origin.x, state.origin.y]);\n\n  const handleMouseUp = useCallback(() => {\n    requestAnimationFrame(() => {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n\n      onDragEnd();\n    });\n  }, [onDragEnd]);\n\n  useEffect(() => {\n    if (state.isDragging && isDisabled) {\n      setState((current) => ({\n        ...current,\n        isDragging: false,\n        width: undefined,\n        height: undefined,\n      }));\n    }\n  }, [isDisabled, state.isDragging]);\n\n  useEffect(() => {\n    if (state.isDragging) {\n      window.addEventListener('touchmove', handleMouseMove);\n      window.addEventListener('mousemove', handleMouseMove);\n      window.addEventListener('touchend', handleMouseUp);\n      window.addEventListener('touchcancel', handleMouseUp);\n      window.addEventListener('mouseup', handleMouseUp);\n    } else {\n      window.removeEventListener('touchmove', handleMouseMove);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('touchend', handleMouseUp);\n      window.removeEventListener('touchcancel', handleMouseUp);\n      window.removeEventListener('mouseup', handleMouseUp);\n\n      setState((current) => ({\n        ...current,\n        translation: ZERO_POINT,\n      }));\n    }\n\n    return () => {\n      if (state.isDragging) {\n        window.removeEventListener('touchmove', handleMouseMove);\n        window.removeEventListener('mousemove', handleMouseMove);\n        window.removeEventListener('touchend', handleMouseUp);\n        window.removeEventListener('touchcancel', handleMouseUp);\n        window.removeEventListener('mouseup', handleMouseUp);\n      }\n    };\n  }, [handleMouseMove, handleMouseUp, state.isDragging]);\n\n  const fullClassName = buildClassName(styles.container, state.isDragging && styles.isDragging);\n\n  const cssStyles = useMemo(() => {\n    return buildStyle(\n      state.isDragging && `transform: translate(${state.translation.x}px, ${state.translation.y}px)`,\n      state.width ? `width: ${state.width}px` : undefined,\n      state.height ? `height: ${state.height}px` : undefined,\n      externalStyle,\n    );\n  }, [externalStyle, state.height, state.isDragging, state.translation.x, state.translation.y, state.width]);\n\n  return (\n    <div style={cssStyles} className={fullClassName} ref={ref}>\n      {children}\n\n      {!isDisabled && (\n        <div\n          aria-label={lang('i18n_dragToSort')}\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.knob, 'draggable-knob')}\n          onMouseDown={handleMouseDown}\n          onTouchStart={handleMouseDown}\n          style={knobStyle}\n        >\n          <i className=\"icon-sort\" aria-hidden />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Draggable);\n\nfunction getClientCoordinate(e: MouseEvent | TouchEvent | React.MouseEvent | React.TouchEvent) {\n  let x;\n  let y;\n\n  if ('touches' in e) {\n    x = e.touches[0].clientX;\n    y = e.touches[0].clientY;\n  } else {\n    x = e.clientX;\n    y = e.clientY;\n  }\n\n  return { x, y };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"C9QYXaRLeCEFngOBl4S3\",\"isDragging\":\"vhGsRt79lQzzuXny9KG8\",\"knob\":\"oGgH1RraeCPayQnxA8C_\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"u8GGVdXgbKUMvoqqs0VJ\",\"header\":\"sPTmRsKHnc3FL9AubUaY\",\"description\":\"YqnFSIc98kYMRge1RrlJ\",\"sortableContainer\":\"pWxbEJm12NZb25lGmdwA\",\"item\":\"AWgYeVXfLin4VAmQzhKQ\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUsername } from '../../api/types';\n\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport buildClassName from '../../util/buildClassName';\nimport { isBetween } from '../../util/math';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm!.username,\n        isActive: !usernameForConfirm!.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","import type { ChangeEvent } from 'react';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { selectTabState, selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport UsernameInput from '../../common/UsernameInput';\nimport TextArea from '../../ui/TextArea';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { isBetween } from '../../../../util/math';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Draggable from '../../../ui/Draggable';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">{folder.subtitle}</span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  isRemoved?: boolean;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId!, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder as ApiChatFolder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId } = global.chatFolders;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div className=\"picker-list-divider\" />\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo as ISettings['messageSendKeyCombo'] });\n  }, [setSettingOption]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { validateFiles } from '../../../util/files';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyVoiceMessages?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  shouldArchiveAndMuteNewNonContact,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyVoiceMessages,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    showNotification,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings, loadWebAuthorizations]);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleVoiceMessagesClick = useCallback(() => {\n    if (isCurrentUserPremium) {\n      onScreenSelect(SettingsScreens.PrivacyVoiceMessages);\n    } else {\n      showNotification({\n        message: lang('PrivacyVoiceMessagesPremiumOnly'),\n      });\n    }\n  }, [isCurrentUserPremium, lang, onScreenSelect, showNotification]);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings(isChecked);\n  }, [updateContentSettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        <ListItem\n          icon=\"key\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('Passcode')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          disabled={!isCurrentUserPremium}\n          allowDisabledClick\n          rightElement={!isCurrentUserPremium && <i className=\"icon-lock-badge settings-icon-locked\" />}\n          className=\"no-icon\"\n          onClick={handleVoiceMessagesClick}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessages')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyVoiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NewChatsFromNonContacts')}\n        </h4>\n        <Checkbox\n          label={lang('ArchiveAndMute')}\n          subLabel={lang('ArchiveAndMuteInfo')}\n          checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n          onCheck={handleArchiveAndMuteChange}\n        />\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyVoiceMessages: privacy.voiceMessages,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  languages,\n  language,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode as LangCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption, loadAttachBots]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll settings-item--first\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"fb5F16dNcZnOl5zZNuRC\"};","import type { ChangeEvent, RefObject } from 'react';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport CropModal from './CropModal';\n\nimport styles from './SelectAvatar.module.scss';\n\ntype OwnProps = {\n  onChange: (file: File) => void;\n  inputRef: RefObject<HTMLInputElement>;\n};\n\nconst SelectAvatar: FC<OwnProps> = ({\n  onChange,\n  inputRef,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n  }, [onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  return (\n    <>\n      <input\n        type=\"file\"\n        onChange={handleSelectFile}\n        accept=\"image/png, image/jpeg\"\n        ref={inputRef}\n        className={styles.input}\n      />\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </>\n  );\n};\n\nexport default memo(SelectAvatar);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUser,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const fallbackPhoto = currentUser.fullInfo?.fallbackPhoto;\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!currentUser.fullInfo) {\n      loadFullUser({ userId: currentUser.id });\n    }\n  }, [currentUser.fullInfo, currentUser.id, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: fallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, fallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(fallbackPhoto ? 'Privacy.ProfilePhoto.UpdatePublicPhoto' : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {fallbackPhoto && (\n        <ListItem\n          leftElement={<Avatar photo={fallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(fallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"pqiopoENn7dO3E8DQI3e\",\"fallbackPhoto\":\"pqiopoENn7dO3E8DQI3e\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getPrivacyKey } from './helpers/privacy';\nimport { selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n    currentUser: ApiUser;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n  currentUser,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n\n      {screen === SettingsScreens.PrivacyProfilePhoto && exceptionLists.shouldShowAllowed && (\n        <SettingsPrivacyPublicProfilePhoto currentUser={currentUser} />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    const currentUser = selectUser(global, global.currentUserId!)!;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        privacySettings = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {\n        currentUser,\n      };\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n      currentUser,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"settingsActiveSession\":\"P9I8aybVU7NyFiMWiyU2\",\"iconDevice\":\"a633Zas_0v2MAAY277vj\",\"iconDevice__android\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDeviceAndroid\":\"GUI0ogXbRdxQ2RGy8fGv\",\"iconDevice__apple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDeviceApple\":\"emCcCPeQ7_9DHBonyO02\",\"iconDevice__brave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDeviceBrave\":\"OMEQQMEIcjln7GIyfO3Q\",\"iconDevice__chrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDeviceChrome\":\"XEQtza6nFt8ptPkvbi2w\",\"iconDevice__edge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDeviceEdge\":\"iHueuVDDSF_BaK2Wa06i\",\"iconDevice__firefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDeviceFirefox\":\"KM9rrbhNSrNOW8roXGo_\",\"iconDevice__linux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDeviceLinux\":\"JzdHedSfMsVcaa8u4X6O\",\"iconDevice__opera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDeviceOpera\":\"McukeiFuIkeZbxMNzQKK\",\"iconDevice__safari\":\"XGWuju_22haQw0Qraor7\",\"iconDeviceSafari\":\"XGWuju_22haQw0Qraor7\",\"iconDevice__samsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDeviceSamsung\":\"ZZGcTr3P3RJrOwOwFX6r\",\"iconDevice__ubuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDeviceUbuntu\":\"OPtbMfpfiWN3dxilMOPX\",\"iconDevice__unknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDeviceUnknown\":\"xoc1kuf1XAKh_dhO758U\",\"iconDevice__vivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDeviceVivaldi\":\"Y25gBvz9xzZicoJgQf8Y\",\"iconDevice__windows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDeviceWindows\":\"dKbtoO2xjdhL8W2mqyxr\",\"iconDevice__xbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"iconDeviceXbox\":\"FhLv8AIUHzsoTX8b0zdA\",\"title\":\"b9iUjEhCpOrQ4dPhn2KU\",\"note\":\"hTTCWbngkwJoEwtGFD9o\",\"date\":\"pUv5oVVNDZ5lBRzNzx3X\",\"box\":\"e32uLjclYAYuxxW1CAex\",\"actionHeader\":\"xwSMwr4aHsrRVIVInLEo\",\"actionName\":\"tSrCe7E_Iom1nGuh2Gs3\",\"headerButton\":\"N0buK669iHOZ1hN_H7Ik\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OeRWKjYQC6t7Uxv8I3j0\",\"avatar\":\"oy_023CG29VsnL9L5ulf\",\"title\":\"bg8UD_Pu2JWogmjuvVXg\",\"note\":\"TgiK64wG1hkOWSiXybQf\",\"box\":\"HSyJbRkyhkeT0s2QA4Ku\",\"action-header\":\"AQX7GM28GeWO4b1bXTNK\",\"actionHeader\":\"AQX7GM28GeWO4b1bXTNK\",\"action-name\":\"_VJHBZTk5qdYimQAoCWe\",\"actionName\":\"_VJHBZTk5qdYimQAoCWe\",\"header-button\":\"hlKLEbMQAsx572pUREy0\",\"headerButton\":\"hlKLEbMQAsx572pUREy0\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  animationLevel,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar className={styles.avatar} user={renderingBot} size=\"large\" animationLevel={animationLevel} withVideo />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n  return {\n    session,\n    bot,\n    animationLevel: global.settings.byKey.animationLevel,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"n3bBygyO4j5MQyJ70Twt\",\"clear-help\":\"vUICy6ZQCYFSrvvxXe7f\",\"clearHelp\":\"vUICy6ZQCYFSrvvxXe7f\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n  animationLevel: AnimationLevel;\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  animationLevel,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" animationLevel={animationLevel} withVideo />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\nimport FullNameTitle from '../../common/FullNameTitle';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, contactId) => {\n      const isPrivate = isUserId(contactId);\n      const user = isPrivate ? usersByIds[contactId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[contactId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n    const userOrChat = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          {userOrChat && <FullNameTitle peer={userOrChat} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, config } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram WebZ.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram WebZ and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport ListItem from '../ui/ListItem';\nimport Button from '../ui/Button';\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noAnimate?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noAnimate,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noAnimate={noAnimate}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noAnimate={noAnimate}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport { SettingsScreens } from '../../../types';\nimport type { ISettings } from '../../../types';\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport StickerSetCard from '../../common/StickerSetCard';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' |\n    'shouldLoopStickers'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  availableReactions,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(SettingsStickers));\n","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n    };\n  },\n)(SettingsCustomEmoji));\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { getActions } from '../../../global';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsExperimental: FC<OwnProps> = ({\n  isActive,\n  onReset,\n}) => {\n  const { requestConfetti } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti()}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsExperimental);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsExperimental from './SettingsExperimental';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    if (forceReturnToChatList === true) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || screen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!isMobile}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  isForumPanelOpen?: boolean;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  onReset,\n  onTopicSearch,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelOpen && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} isForumPanelOpen={isForumPanelOpen} />\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('FilterAddTo')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            message, undefined, undefined, undefined, undefined, undefined, true,\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiReaction } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  chosen?: boolean;\n  onToggleReaction: (reaction: ApiReaction) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction,\n  previewIndex,\n  isReady,\n  chosen,\n  onToggleReaction,\n}) => {\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderStatic = !isReady || !isAnimationLoaded;\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n\n  function handleClick() {\n    onToggleReaction(reaction.reaction);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact', chosen && 'chosen')}\n      onClick={handleClick}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn('static')}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import React, {\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiReaction, ApiReactionCount,\n} from '../../../api/types';\n\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport { isSameReaction, canSendReaction, getReactionUniqueKey } from '../../../global/helpers';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: ApiChatReactions;\n  onToggleReaction: (reaction: ApiReaction) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  currentReactions?: ApiReactionCount[];\n  maxUniqueReactions?: number;\n  isReady?: boolean;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  currentReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isReady,\n  onToggleReaction,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  useHorizontalScroll(itemsScrollRef);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY && e.cancelable) {\n      e.preventDefault();\n    }\n  };\n\n  const reactionsToRender = useMemo(() => {\n    return availableReactions?.map((availableReaction) => {\n      if (availableReaction.isInactive) return undefined;\n      if (!isPrivate && (!enabledReactions || !canSendReaction(availableReaction.reaction, enabledReactions))) {\n        return undefined;\n      }\n      if (maxUniqueReactions && currentReactions && currentReactions.length >= maxUniqueReactions\n        && !currentReactions.some(({ reaction }) => isSameReaction(reaction, availableReaction.reaction))) {\n        return undefined;\n      }\n      return availableReaction;\n    }) || [];\n  }, [availableReactions, currentReactions, enabledReactions, isPrivate, maxUniqueReactions]);\n\n  const userReactionIndexes = useMemo(() => {\n    const chosenReactions = currentReactions?.filter(({ chosenOrder }) => chosenOrder !== undefined) || [];\n    return new Set(chosenReactions.map(({ reaction }) => (\n      reactionsToRender.findIndex((r) => r && isSameReaction(r.reaction, reaction))\n    )));\n  }, [currentReactions, reactionsToRender]);\n\n  if (!reactionsToRender.length) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {reactionsToRender.map((reaction, i) => {\n            if (!reaction) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={getReactionUniqueKey(reaction.reaction)}\n                previewIndex={i}\n                isReady={isReady}\n                onToggleReaction={onToggleReaction}\n                reaction={reaction}\n                chosen={userReactionIndexes.has(i)}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiMessage, ApiReaction, ApiSponsoredMessage, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/Skeleton';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  onReply?: () => void;\n  onEdit?: () => void;\n  onPin?: () => void;\n  onUnpin?: () => void;\n  onForward?: () => void;\n  onDelete?: () => void;\n  onReport?: () => void;\n  onFaveSticker?: () => void;\n  onUnfaveSticker?: () => void;\n  onSelect?: () => void;\n  onSend?: () => void;\n  onReschedule?: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: () => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onCancelVote?: () => void;\n  onClosePoll?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onAboutAds?: () => void;\n  onSponsoredHide?: () => void;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  isDownloading,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentUsers,\n  hasCustomEmoji,\n  customEmojiSets,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const handleOpenCustomEmojiSets = useCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  }, [customEmojiSets, onClose, openCustomEmojiSets, openStickerSet]);\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n    );\n\n  const getTriggerElement = useCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition__slide--active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  }, [isSponsoredMessage, messageId]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((isMobile && !extraHeightAudioPlayer)\n      || (!isMobile && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [isMobile, withReactions]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && message.seenByUserIds?.length\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, message.seenByUserIds.length],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                message.seenByUserIds?.length === 1 && seenByRecentUsers\n                  ? renderText(getUserFullName(seenByRecentUsers[0])!)\n                  : (message.seenByUserIds?.length\n                    ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && <MenuItem icon=\"help\" onClick={onAboutAds}>{lang('SponsoredMessageInfo')}</MenuItem>}\n        {isSponsoredMessage && onSponsoredHide && (\n          <MenuItem icon=\"stop\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type {\n  ApiAvailableReaction, ApiStickerSetInfo, ApiMessage, ApiStickerSet, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsPremiumPurchaseBlocked,\n  selectMessageCustomEmojiSets,\n  selectStickerSet,\n} from '../../../global/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal, getMessageVideo, getChatMessageLink,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useSchedule from '../../../hooks/useSchedule';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  threadId?: number;\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  activeDownloads,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  threadId,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(({ userId }) => usersById[userId]));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, 3);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleCancelVote = useCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, cancelPollVote]);\n\n  const handlePollClose = useCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message, closePoll]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleRescheduleMessage = useCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  }, [message.chatId, message.id, onClose, rescheduleMessage]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  }, [handleRescheduleMessage, requestCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(getChatMessageLink(message.chatId, chatUsername, threadId, message.id));\n    closeMenu();\n  }, [chatUsername, closeMenu, message, threadId]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleToggleReaction = useCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId, messageId: message.id, reaction,\n    });\n    closeMenu();\n  }, [closeMenu, message, toggleReaction]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      threadId,\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  canBuyPremium?: boolean;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps & StateProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onClose,\n  onCloseAnimationEnd,\n  canBuyPremium,\n}) => {\n  const { openPremiumModal } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useCallback(() => {\n    onAboutAds();\n    closeMenu();\n  }, [closeMenu, onAboutAds]);\n\n  const handleSponsoredHide = useCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  }, [closeMenu, onClose, openPremiumModal]);\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={canBuyPremium ? handleSponsoredHide : undefined}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canBuyPremium: !selectIsCurrentUserPremium(global) && !selectIsPremiumPurchaseBlocked(global),\n    };\n  },\n)(SponsoredMessageContextMenuContainer));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf, selectIsCurrentUserPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n} from '../../global/selectors';\nimport renderText from './helpers/renderText';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useSchedule from '../../hooks/useSchedule';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder: isAdded });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            <div className=\"shared-canvas-container\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qzt_zq5gWHne6P2rw7Wj\",\"sets\":\"Ay41sqhq2QmXdgDHnt2E\"};","import React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: customEmojiModalRef });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title=\"Sets of used emoji\"\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef}>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat,\n  selectNotifySettings,\n  selectNotifyExceptions,\n  selectUser,\n  selectChatBot,\n  selectIsPremiumPurchaseBlocked,\n  selectCurrentMessageList, selectTabState,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getCanDeleteChat,\n  selectIsChatMuted,\n  getCanAddContact,\n  isChatChannel,\n  isChatGroup,\n  getCanManageTopic,\n  isUserRightBanned,\n  getHasAdminRight,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isChatInfoShown,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openGiftPremiumModal,\n    openChatWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleViewGroupInfo = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n    closeMenu();\n  }, [chatId, closeMenu, openChatWithInfo, threadId]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleCreateTopicClick = useCallback(() => {\n    openCreateTopicPanel({ chatId });\n    closeMenu();\n  }, [openCreateTopicPanel, chatId, closeMenu]);\n\n  const handleEditTopicClick = useCallback(() => {\n    openEditTopicPanel({ chatId, topicId: threadId });\n    closeMenu();\n  }, [openEditTopicPanel, chatId, threadId, closeMenu]);\n\n  const handleViewAsTopicsClick = useCallback(() => {\n    openChat({ id: undefined });\n    closeMenu();\n  }, [closeMenu, openChat]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, requestMasterAndJoinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleGiftPremiumClick = useCallback(() => {\n    openGiftPremiumModal({ forUserId: chatId });\n    closeMenu();\n  }, [openGiftPremiumModal, chatId, closeMenu]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestMasterAndRequestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  const handleOpenAsMessages = useCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  }, [closeMenu, onAsMessagesClick]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {lang(isPrivate\n                  ? 'DeleteChatUser'\n                  : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const canGiftPremium = Boolean(\n      global.lastSyncTime\n      && user?.fullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botInfo?.commands,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat, selectTabState } from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleCloseLocalTextSearch = useCallback(() => {\n    closeLocalTextSearch();\n  }, [closeLocalTextSearch]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={handleCloseLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","import { fixImageContent } from '../../../../util/parseMessageInput';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  }, [threshold]);\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZqafRENXro3B4A2UTp9s\",\"preview\":\"FfTpBGrctDEiFLXC4aqP\",\"duration\":\"Igo3Vsou5areTsmh2Ng3\",\"single\":\"ZJNnn8HUzq8cC3WwTzY0\",\"no-grouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"noGrouping\":\"Aj1qc6z4t_pSWrsXi0qf\",\"file\":\"QAlzNLWBYdWR4UMMaiGm\",\"overlay\":\"YOoQRXIFINVsu3FFIKR0\",\"action-item\":\"y5JLmIFtCzK05l40rdHJ\",\"actionItem\":\"y5JLmIFtCzK05l40rdHJ\",\"delete-file\":\"Qqp72_dWGSui9ORCN3MT\",\"deleteFile\":\"Qqp72_dWGSui9ORCN3MT\"};","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useCallback(() => {\n    onToggleSpoiler?.(index);\n  }, [index, onToggleSpoiler]);\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <i\n            className={buildClassName(\n              attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n              styles.actionItem,\n            )}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n            <i className={buildClassName('icon-delete', styles.actionItem)} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VncEpkgqABgA8MUCarxh\",\"mobile\":\"EBYYWwiG6Uj4Aqt4DKGy\",\"symbolMenuOpen\":\"eVLBe8iLKwjR6B31YwJj\",\"header-border\":\"u08mL9ikB7S0oRZKxvsA\",\"headerBorder\":\"u08mL9ikB7S0oRZKxvsA\",\"attachments\":\"d_uMaJ26HlkCfSn5XiQp\",\"attachments-bottom-padding\":\"DUGHCuTKi7H5d_1_vYqj\",\"attachmentsBottomPadding\":\"DUGHCuTKi7H5d_1_vYqj\",\"caption-wrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"captionWrapper\":\"BKyeut4mBbq_uw8uGfSU\",\"caption-top-border\":\"UrYInfws7roRktEiMxvT\",\"captionTopBorder\":\"UrYInfws7roRktEiMxvT\",\"caption\":\"c4dyk1Emgpla8BvDJMAz\",\"drop-target\":\"iWmxxlUXOjTzbvJzWF8g\",\"dropTarget\":\"iWmxxlUXOjTzbvJzWF8g\",\"hovered\":\"B5wzgwCPupbnO1XB5Rwc\",\"send-wrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"sendWrapper\":\"z4wF5bBjL74eNUj_UYeu\",\"send\":\"eFD46lVH5GCILXEOx9BO\",\"is-pointer-env\":\"Os76p3jpmhB2IWYxXigi\",\"isPointerEnv\":\"Os76p3jpmhB2IWYxXigi\"};","import React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiAttachment, ApiChatMember, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\nimport { selectChat, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport buildClassName from '../../../util/buildClassName';\nimport { validateFiles } from '../../../util/files';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  isForCurrentMessageList?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  isForCurrentMessageList,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useRef<HTMLButtonElement | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = (shouldSchedule || shouldSendScheduled) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(shouldSendCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: shouldSendCompressed,\n        shouldSendGrouped,\n      });\n    }\n  }, [\n    isOpen, shouldSchedule, onSendScheduled, onSend, updateAttachmentSettings, shouldSendCompressed, shouldSendGrouped,\n    onSendSilent,\n  ]);\n\n  const handleSendSilent = useCallback(() => {\n    sendAttachments(true);\n  }, [sendAttachments]);\n\n  const handleSendClick = useCallback(() => {\n    sendAttachments();\n  }, [sendAttachments]);\n\n  const handleScheduleClick = useCallback(() => {\n    sendAttachments(false, true);\n  }, [sendAttachments]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  }, [isEverySpoiler, onFileAppend]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  }, [handleFileSelect]);\n\n  const handleDelete = useCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleEnableSpoilers = useCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: true })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleDisableSpoilers = useCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const handleToggleSpoiler = useCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  }, [attachments, onAttachmentsUpdate]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = shouldSendCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <DropdownMenu\n          className=\"attachment-modal-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n          {hasMedia && (\n            <>\n              {\n                shouldSendCompressed ? (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                    {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                  </MenuItem>\n                ) : (\n                  // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                    {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                  </MenuItem>\n                )\n              }\n              {shouldSendCompressed && (\n                hasSpoiler ? (\n                  <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                    {lang('Attachment.DisableSpoiler')}\n                  </MenuItem>\n                ) : (\n                  <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                    {lang('Attachment.EnableSpoiler')}\n                  </MenuItem>\n                )\n              )}\n            </>\n          )}\n          {isMultiple && (\n            shouldSendGrouped ? (\n              <MenuItem\n                icon=\"grouped-disable\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setShouldSendGrouped(false)}\n              >\n                Ungroup All Media\n              </MenuItem>\n            ) : (\n              // eslint-disable-next-line react/jsx-no-bind\n              <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                Group All Media\n              </MenuItem>\n            )\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={shouldSendCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n            />\n            <MessageInput\n              ref={inputRef}\n              id=\"caption-input-text\"\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {lang('Send')}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chat?.fullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(index === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [correctOption, options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 10;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { uncompressEmoji } from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { pick } from '../../../util/iteratees';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector(`#emoji-category-${index}`)! as HTMLElement;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  PREMIUM_STICKER_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION, STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy, uniqueByField } from '../../../util/iteratees';\nimport { selectChat, selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport PremiumIcon from '../../common/PremiumIcon';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  premiumStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  premiumStickers,\n  addedSetIds,\n  stickerSetsById,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, addedSetIds));\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (isCurrentUserPremium) {\n      const addedPremiumStickers = existingAddedSetIds\n        .map(({ stickers }) => stickers?.filter((sticker) => sticker.hasEffect))\n        .flat()\n        .filter(Boolean);\n\n      const totalPremiumStickers = uniqueByField([...addedPremiumStickers, ...premiumStickers], 'id');\n\n      if (totalPremiumStickers.length) {\n        defaultSets.push({\n          id: PREMIUM_STICKER_SET_ID,\n          accessHash: '0',\n          title: lang('PremiumStickers'),\n          stickers: totalPremiumStickers,\n          count: totalPremiumStickers.length,\n        });\n      }\n    }\n\n    if (chat?.fullInfo?.stickerSet) {\n      const fullSet = stickerSetsById[chat.fullInfo.stickerSet.id];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          accessHash: fullSet.accessHash,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds, stickerSetsById, favoriteStickers, recentStickers, isCurrentUserPremium, chat, lang, premiumStickers,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets && canSendStickers;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.id === PREMIUM_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === PREMIUM_STICKER_SET_ID ? (\n            <PremiumIcon withGradient big />\n          ) : stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noAnimate={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noAnimate={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          onClick={selectStickerSet}\n          clickArg={index}\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      premiumSet,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      premiumStickers: premiumSet.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectTabState, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport CustomEmojiPicker from './CustomEmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    shouldUpdateStickerSetsOrder?: boolean\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  positionX?: 'left' | 'right';\n  positionY?: 'top' | 'bottom';\n  transformOriginX?: number;\n  transformOriginY?: number;\n  style?: string;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isCurrentUserPremium?: boolean;\n  lastSyncTime?: number;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  isCurrentUserPremium,\n  lastSyncTime,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  isAttachmentModal,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  className,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  positionX,\n  positionY,\n  transformOriginX,\n  transformOriginY,\n  style,\n}) => {\n  const { loadPremiumSetStickers, loadFeaturedEmojiStickers } = getActions();\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useEffect(() => {\n    if (!lastSyncTime) return;\n    if (isCurrentUserPremium) {\n      loadPremiumSetStickers();\n    }\n    loadFeaturedEmojiStickers();\n  }, [isCurrentUserPremium, lastSyncTime, loadFeaturedEmojiStickers, loadPremiumSetStickers]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || isAttachmentModal) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  }, [onCustomEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, shouldUpdateStickerSetsOrder);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            chatId={chatId}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        if (!canSendStickers) return undefined;\n\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        if (!canSendGifs || !onGifSelect) return undefined;\n\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={isAttachmentModal ? positionX : 'left'}\n      positionY={isAttachmentModal ? positionY : 'bottom'}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      lastSyncTime: global.lastSyncTime,\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"o7fHB9vMHP_k5l9rZC2R\",\"emojiButton\":\"LzdBMbvLbmND0s2zfaff\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global/types';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  }, [addRecentCustomEmoji, clearCustomEmojiForEmoji, isOpen, onCustomEmojiSelect]);\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu with-menu-transitions\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSticker } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji documentId={emoji.id} size={CUSTOM_EMOJI_SIZE} withSharedAnimation shouldPreloadPreview />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { FC } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\n\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\nimport CustomEmojiButton from './CustomEmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const handleSelect = useCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  }, [handleCustomEmojiSelect, handleSelectEmoji]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleCustomEmojiClick = useCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  }, [addRecentCustomEmoji, onCustomEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport FullNameTitle from '../../common/FullNameTitle';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const userOrChat = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium && <i className=\"icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              {userOrChat && <FullNameTitle peer={userOrChat} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import React, {\n  useMemo, memo, useRef, useEffect, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n} from '../../global/helpers';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  animationLevel?: AnimationLevel;\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  animationLevel,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const handleSearchTextMessagesLocal = useCallback(() => {\n    searchTextMessagesLocal();\n  }, [searchTextMessagesLocal]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(handleSearchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} animationLevel={animationLevel} withVideo />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            <FullNameTitle peer={(senderUser || senderChat)!} />\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getActions } from '../../../global';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => getMainUsername(data.chat), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport { selectTabState } from '../../global/selectors';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage, selectTabState } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {Boolean(lastSyncTime) && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qj1MQaLfhumlxACIpkUl\",\"content\":\"ph5g3hCSQ_72FnZ3YkuA\",\"section\":\"bYZBp9H7Ks8tqaBvQm57\",\"top\":\"sV6D57DhbsFwQhRNzw9K\",\"bottom\":\"pUkmozcBdIn4yWGGPoX1\",\"iconWrapper\":\"JT0__kgf23rGv5BWQF2s\",\"icon\":\"gx85t_IsGh2fgS2yDGtk\",\"clickable\":\"TVwtYFuxdwJH5LZ7yvwu\",\"heading\":\"o9l56jP2uXfAul061gXq\",\"icon-picker\":\"ByQF8Qg3NcYnBCvGwoH0\",\"iconPicker\":\"ByQF8Qg3NcYnBCvGwoH0\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport { getTopicColors } from '../../util/forumColors';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport CustomEmojiPicker from '../middle/composer/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoom-fade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport TopicIcon from '../common/TopicIcon';\nimport InputText from '../ui/InputText';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\nimport Loading from '../ui/Loading';\nimport CustomEmojiPicker from '../middle/composer/CustomEmojiPicker';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top)}>\n              <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoom-fade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  selectChat, selectTabState, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { isUserBot, selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Avatar from '../../common/Avatar';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n  const personalPhoto = user.fullInfo?.personalPhoto;\n  const notPersonalPhoto = user.fullInfo?.profilePhoto || user.fullInfo?.fallbackPhoto;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              {lang('UserInfo.SuggestPhoto', user.firstName)}\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              {lang('UserInfo.SetCustomPhoto', user.firstName)}\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    user={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"text-muted\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = selectTabState(global).management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementProgress, ManagementScreens } from '../../../types';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n  isChatSuperGroup,\n} from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\nimport Switcher from '../../ui/Switcher';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 9;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => hasLinkedChannel || isChatPublic(chat), [chat, hasLinkedChannel]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const handleForumToggle = useCallback(() => {\n    toggleForum({ chatId, isEnabled: !chat.isForum });\n  }, [chat.isForum, chatId, toggleForum]);\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chat.fullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chat.fullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chat.fullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chat.fullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chat.fullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chat, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n      'manageTopics',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chat.fullInfo?.adminMembersById || {}).length;\n  }, [chat.fullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={chat.isForum}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={chat.isForum}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && isChatSuperGroup(chat) && getHasAdminRight(chat, 'changeInfo');\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.availableReactions,\n      canEditForum,\n    };\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={!permissions.manageTopics}\n                label={lang('CreateTopicsPermission')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chat.fullInfo?.members, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiAvailableReaction, ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = Object.keys(chat.fullInfo?.adminMembersById || {}).length;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chat.fullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chat.fullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chat.fullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    const text = totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n    return text;\n  }, [availableReactions, chat, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactions: global.availableReactions,\n    };\n  },\n)(ManageChannel));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { selectChat, selectTabState, selectManagement } from '../../../global/selectors';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ManageUsernames from '../../common/ManageUsernames';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? editableUsername : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '' });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 1;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(linkedChat?.isJoinToSend);\n  const [isJoinRequest, setIsJoinRequest] = useState(linkedChat?.isJoinRequest);\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={!permissions.manageTopics}\n                label={lang('CreateTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const canAddNewAdmins = Boolean(chat.isCreator || chat.adminRights?.addAdmins);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo?.adminMembersById) {\n      return [];\n    }\n\n    return Object.values(chat.fullInfo.adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const adminMembers = useMemo(() => {\n    if (!chat?.fullInfo?.adminMembersById) {\n      return [];\n    }\n\n    return Object.values(chat.fullInfo.adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? chat.fullInfo?.adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot, getHasAdminRight, isChatBasicGroup,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport DeleteMemberModal from '../DeleteMemberModal';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  isBasicGroup?: boolean;\n  areParticipantsHidden?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  isBasicGroup,\n  areParticipantsHidden,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement, toggleParticipantsHidden,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  const handleToggleParticipantsHidden = useCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  }, [areParticipantsHidden, chatId, toggleParticipantsHidden]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {!isBasicGroup && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    return {\n      isBasicGroup: Boolean(chat && isChatBasicGroup(chat)),\n      areParticipantsHidden: Boolean(chat && chat.fullInfo?.areParticipantsHidden),\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.usernames && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId];\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem no-selection\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n  animationLevel,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n            animationLevel={animationLevel}\n            withVideo\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  tabIndex?: number;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    tabIndex,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        tabIndex={tabIndex}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"SM3T4awhZJvKn_c8aRuY\",\"description\":\"RWoBZem6PCNMF5hu6Shs\",\"checkout-picture\":\"prUKJGh6W9LIyjSnRbZc\",\"checkoutPicture\":\"prUKJGh6W9LIyjSnRbZc\",\"text\":\"xUG3uFeTiPPFkWHQELCc\",\"checkout-title\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkoutTitle\":\"MO45Rkd2ksVxfzAONvQ6\",\"checkout-description\":\"LqaZe1TRdNI17BEa1gcl\",\"checkoutDescription\":\"LqaZe1TRdNI17BEa1gcl\",\"price-info\":\"mz2vhtmYPNRaJbeUrXKA\",\"priceInfo\":\"mz2vhtmYPNRaJbeUrXKA\",\"price-info-item\":\"Ct9Ine31cu5h7FCjtRWa\",\"priceInfoItem\":\"Ct9Ine31cu5h7FCjtRWa\",\"price-info-item-main\":\"JduVB3d3NxN9TybmxIgS\",\"priceInfoItemMain\":\"JduVB3d3NxN9TybmxIgS\",\"price-info-item-title\":\"O7d8G4OQ_yTJSHiHbgBR\",\"priceInfoItemTitle\":\"O7d8G4OQ_yTJSHiHbgBR\",\"tipsList\":\"zsSyrAOxg0qs0nPJWSEe\",\"tipsItem\":\"lcjeIUsdqs95BdK_oysT\",\"tipsItem_active\":\"XRnGKO5ClzA_4S8i81wC\",\"tipsItemActive\":\"XRnGKO5ClzA_4S8i81wC\",\"invoice-info\":\"MyMLGHhiEKOVIoG3aQTS\",\"invoiceInfo\":\"MyMLGHhiEKOVIoG3aQTS\",\"provider\":\"hLVHJSaVspSZdzxNlBJk\",\"stripe\":\"nrKVVKzRmr7s0TE15uG1\",\"smartglocal\":\"oONvjFUTa5AbWvrbzbWn\",\"checkout-info-item-info-title\":\"bkIqUpVUAY04wdT8fySX\",\"checkoutInfoItemInfoTitle\":\"bkIqUpVUAY04wdT8fySX\",\"checkout-info-item-info-data\":\"VAzhVfK6c1pUriepo4Ga\",\"checkoutInfoItemInfoData\":\"VAzhVfK6c1pUriepo4Ga\",\"tos-checkbox\":\"WjrdCzbl3hROmSBGGnjy\",\"tosCheckbox\":\"WjrdCzbl3hROmSBGGnjy\"};","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { ApiChat, ApiInvoice, ApiPaymentCredentials } from '../../api/types';\n\nimport { PaymentStep } from '../../types';\nimport { getWebDocumentHash } from '../../global/helpers';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Checkbox from '../ui/Checkbox';\nimport Skeleton from '../ui/Skeleton';\nimport SafeLink from '../common/SafeLink';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  chat?: ApiChat;\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n};\n\nconst Checkout: FC<OwnProps> = ({\n  chat,\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, isRecurring, recurringTermsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', chat?.title);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {isRecurring && renderTos(recurringTermsUrl!)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: string;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n    >\n      {customIcon && <i className={customIcon} />}\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\nimport mirIconPath from '../../assets/mir.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ninterface IframeCallbackEvent {\n  eventType: string;\n  eventData: {\n    path_full: string;\n  };\n}\n\nconst ConfirmPayment: FC<OwnProps> = ({ url, noRedirect, onClose }) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n\n      if (eventType !== 'web_app_open_tg_link') {\n        return;\n      }\n\n      if (!noRedirect) {\n        const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n        openTelegramLink({ url: linkUrl });\n      }\n\n      onClose();\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport PasswordMonkey from '../common/PasswordMonkey';\nimport PasswordForm from '../common/PasswordForm';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    error: payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { Price, ShippingOption } from '../../types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { PaymentStep } from '../../types';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport PasswordConfirm from './PasswordConfirm';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n};\n\ntype GlobalStateProps = Pick<TabState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  chat,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            chat={chat}\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.isRecurring && !isTosAccepted);\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n    } = selectTabState(global).payment;\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import React, { memo, useMemo, useEffect } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  isForForum?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  isForForum,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target?.files?.[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl && croppedBlobUrl !== currentAvatarBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, currentAvatarBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n    isForForum && 'rounded-square',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","objectFit","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","useMediaProps","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","actionPhoto","getMessageActionPhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","memo","withGlobal","global","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","shouldDeleteForAll","handleDeleteMessageForSelf","lang","useLang","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","canReport","zoomLevelChange","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","setZoomLevelChange","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","handleZoomOut","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","length","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","prop","getBrowserFullscreenElementProp","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","PLAYBACK_RATES","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlaying","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","seekerRef","isSeekingRef","isSeeking","IS_TOUCH_ENV","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","url","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsPlayed","setIsFullscreen","useLayoutEffect","listener","isEnabled","controls","listenerEnter","listenerExit","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreen","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","onLeave","isSupported","setIsSupported","setIsInPictureInPicture","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","handleVideoMove","handleVideoLeave","bounds","right","clientY","top","bottom","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","onPlay","onEnded","onPause","onTimeUpdate","join","square","ownProps","selectTabState","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","isActive","animationLevel","onFooterClick","setControlsVisible","isMoving","isGhostAnimation","calculateMediaViewerDimensions","renderPhoto","textParts","content","action","renderMessageText","hasFooter","imageSize","canDrag","Spinner","renderVideoPreview","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelAnimation","cancelZoomAnimation","SwipeDirection","getMediaId","rest","containerRef","activeSlideRef","transformRef","x","y","scale","lastTransformRef","swipeDirectionRef","isActiveRef","isReleasedRef","activeMediaId","setActiveMediaId","prevZoomLevelChange","usePrevious","hasZoomChanged","fullscreenProp","checkIfFullscreen","useFullscreenStatus","isMouseDown","setIsMouseDown","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","setTransform","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","pageX","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","target","handleKeyDown","calculateOffsetBoundaries","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","clamp","minOffsetY","maxOffsetY","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","cleanup","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","transform","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","getAnimationStyle","isRtl","toFixed","selector","matches","messageId","isAvatar","settings","byKey","sender","selectSender","isFallbackAvatar","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","withVideo","formatMediaDateTime","date","shouldSkipHistoryAnimations","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","isChatAdmin","selectChatScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","animationKey","prevSenderId","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","disableDirectTextInput","enableDirectTextInput","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","handleBeforeDelete","ShowTransition","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","name","fullInfo","fallbackPhoto","ReportModal","subject","TOPIC_ICON_SIZE","chatOrUserIds","chatsById","search","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","onCloseAnimationEnd","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","topicIds","topics","topicsResult","searchTitle","toLowerCase","result","values","reduce","acc","topic","getCanPostInChat","keys","Number","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","handleTopicClick","topicId","InputText","onKeyDown","placeholder","InfiniteScroll","items","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","ListItem","clickArg","TopicIcon","letterClassName","Loading","onLoadMore","PrivateChatInfo","status","userId","GroupChatInfo","chats","byId","listIds","orderedPinnedIds","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","filter","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","unique","getGlobal","usersById","users","chatIds","isDeletedUser","MAIN_THREAD_ID","sorted","sortChatIds","filterChatsByName","filterUsersByName","filterChatIdsByType","renderingIds","useCurrentOrPrev","isManyMessages","forwardMessages","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","showNotification","isShown","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","header","renderInviteHeader","renderInvite","contact","pick","getReadableErrorText","notifications","dismissNotification","localId","actionText","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","request","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","close","webApp","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","openChat","openInvoice","setWebAppPaymentSlug","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","backgroundColor","setBackgroundColor","extractCurrentThemeParams","bg_color","headerColor","setHeaderColor","confirmClose","setConfirmClose","isCloseModalOpen","openCloseModal","closeCloseModal","isLoaded","markLoaded","markUnloaded","popupParams","setPopupParams","prevPopupParams","renderingPopupParams","frameRef","buttonText","queryId","replyToMessageId","isSimple","handleEvent","eventType","eventData","slug","linkUrl","TME_LINK_PREFIX","path_full","is_visible","themeParams","validateHexColor","newColor","color_key","data","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","reloadFrame","sendEvent","sendViewport","sendTheme","isSimpleView","onEvent","onLoad","ignoreEventsRef","lastFrameSizeRef","handleLoad","frame","once","contentWindow","postMessage","JSON","stringify","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","req_id","requestId","navigator","clipboard","readText","catch","then","useWebAppFrame","shouldShowMainButton","useInterval","peerId","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","handlePopupClose","buttonId","button_id","handlePopupModalClose","prevIsPaymentModalOpen","handleToggleClick","handleBackClick","openBotChat","MoreMenuButton","isMenuOpen","backButtonClassName","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasSettings","isAttachBot","destructive","sandbox","allow","allowFullScreen","confirmIsDestructive","hasCloseButton","cancelBotTrustRequest","markBotTrusted","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","confirmAttachBotInstall","cancelAttachBotInstall","setIsWriteAllowed","prevBot","renderingBot","handleConfirm","shortName","deleteFolderDialogId","closeDeleteChatFolderModal","deleteChatFolder","handleDeleteFolderMessage","leftValue","rightValue","floatingBadgeIcon","rightStyle","dangerouslySetInnerHTML","__html","COLOR_START","COLOR_END","description","colorStepProgress","lerp","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","useCanvasBlur","useMediaTransition","DeviceFrame","OptimizedVideo","canPlay","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","count","Array","fill","_","isLast","isPreLast","isFirst","isPreFirst","isInvisible","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","setOffset","setSize","renderedStickers","slice","cycleRestrict","clientWidth","l","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","PREMIUM_FEATURE_DESCRIPTIONS","PREMIUM_FEATURE_SECTIONS","PREMIUM_BOTTOM_VIDEOS","LIMITS_ORDER","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","LIMITS_DESCRIPTIONS","promo","initialSection","onClickSubscribe","isPremium","limits","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","handleLimitsScroll","scrollHeight","scrollContainer","fastSmoothScrollHorizontal","handleSelectSlide","async","options","find","option","months","onScroll","scrollLeft","scrollLeftOriginal","setProperty","toString","reverseIndex","ceil","prevElement","reverseElement","slide","section","defaultLimit","premiumLimit","videoSections","videos","thumbnail","isShiny","withPremiumGradient","formatCurrency","amount","currency","COLORS","buttonClassName","PREMIUM_FEATURE_COLOR_ICONS","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumStatus","premiumModal","isClosing","isSuccess","isGift","monthsAmount","fromUser","fromUserId","toUser","toUserId","selectIsCurrentUserPremium","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","appConfig","premiumSlug","premiumInvoiceSlug","premiumBotUsername","premiumPromoOrder","dialogRef","closePremiumModal","requestConfetti","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","handleClickWithStartParam","showConfetti","prevIsPremium","filteredSections","isClosed","PremiumLogo","renderTextWithEntities","statusText","statusEntities","renderFooterText","fullMonthlyAmount","perMonth","floor","discount","handleChange","forUserId","monthlyCurrency","monthlyAmount","giftPremiumModal","gifts","premiumGifts","openPremiumModal","closeGiftPremiumModal","openUrl","renderedUser","renderedGifts","selectedOption","setSelectedOption","firstGift","cheaperGift","gift","selectedGift","botUrl","handlePremiumClick","parts","match","Link","isPrimary","renderPremiumFeaturesLink","LIMIT_DESCRIPTION","uploadMaxFileparts","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","closeLimitReachedModal","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","stickerSet","loadAndPlay","idPrefix","favoriteStickers","isSavedMessages","isStatusPicker","isCurrentUserPremium","shouldHideRecentHeader","withDefaultTopicIcon","withDefaultStatusIcon","observeIntersection","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","onContextMenuOpen","onContextMenuClose","onContextMenuClick","clearRecentStickers","clearRecentCustomEmoji","toggleStickerSet","loadStickers","sharedCanvasRef","sharedCanvasHqRef","isConfirmModalOpen","openConfirmModal","closeConfirmModal","itemsPerRow","setItemsPerRow","isIntersecting","useIsIntersecting","stickerMarginPx","emojiMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","stickerSetInfo","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","EMOJI_SIZE_PICKER","STICKER_SIZE_PICKER","margin","calculateItemsPerRow","entry","contentRect","useResizeObserver","accessHash","isLocked","some","isFree","isInstalled","installedDate","isArchived","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","heightWhenCut","shouldHideHeader","favoriteStickerIdsSet","Set","pill","fluid","grey","isHqEmoji","selectIsAlwaysHighPriorityEmoji","canvasRef","StickerButton","noAnimate","canViewSet","onUnfaveClick","has","onFaveClick","onRemoveRecentClick","STICKER_SIZE_PICKER_HEADER","hasThumbnail","isVideos","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","isReady","useBoundsInSharedCanvas","sharedCanvas","sharedCanvasCoords","coords","getFirstLetters","DEFAULT_ID_PREFIX","stickerSetIntersections","setsById","stickerSetsById","customEmojis","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","addedCustomEmojiIds","added","setIds","canAnimate","shouldLoopStickers","defaultTopicIconsId","defaultStatusIconsId","withDefaultTopicIcons","onCustomEmojiSelect","headerRef","activeSetIndex","setActiveSetIndex","pickTruthy","observe","useIntersectionObserver","rootRef","throttleMs","entries","forEach","startsWith","intersectingWithIndexes","observeIntersectionForCovers","areAddedLoaded","allSets","MEMO_EMPTY_ARRAY","defaultSets","defaultStatusIconsPack","concat","defaultTopicIconsPack","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","shouldRenderContents","useHorizontalScroll","newLeft","offsetWidth","HEADER_BUTTON_WIDTH","selectStickerSet","stickerSetEl","fastSmoothScroll","handleEmojiSelect","emoji","fullClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","CHAT_STICKER_SET_ID","PREMIUM_STICKER_SET_ID","faded","noContextMenu","areFeaturedStickersLoaded","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","SafeLink","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","tabState","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","canForward","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","handleExitMessageSelectMode","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","memberIds","seenByUserIds","closeSeenByModal","handleCloseSeenByModal","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","availableReactions","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","uniqueReactions","reaction","r","isSameReaction","nextOffset","LoadMoreDirection","formatIntegerCompact","reactionsCount","getReactionUniqueKey","ReactionStaticEmoji","flatMap","userReactions","reactor","FullNameTitle","peer","withEmojiStatus","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","IS_ANDROID","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","withVideoAvatar","DeleteChatModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","shouldReplaceHistory","handleClearRecentlyFoundChats","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSelf","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalSearch","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","PickerSelectedItem","chatOrUserId","foundTopicIds","searchChatId","createMapStateToProps","isVoice","activeDownloads","isLoading","CURRENT_TYPE","observeIntersectionForMedia","handleSelectMedia","isMediaGrid","isMessageList","itemSelector","Media","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","openDeleteChatFolderModal","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","SettingsScreens","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","folderId","handleSignOutMessage","forceInitApi","SettingsMenuButton","renderHeaderContent","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","ProfileInfo","canPlayVideo","forceShowSelf","ChatExtra","langName","leftElement","PremiumIcon","withGradient","big","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","username","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","teactExperimentControlled","autoComplete","maxLengthIndicator","onInput","onKeyPress","onPaste","noReplaceNewlines","textareaRef","labelText","textarea","previousSelectionEnd","selectionEnd","htmlFor","ZERO_POINT","onDragEnd","externalStyle","knobStyle","setState","isDragging","translation","handleMouseDown","getClientCoordinate","handleMouseMove","handleMouseUp","cssStyles","buildStyle","onMouseDown","onTouchStart","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","orderedUsernames","dragOrderUsernames","draggedIndex","handleCopyUsername","copyTextToClipboard","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","handleDrag","splice","handleDragEnd","usernameData","isDragged","draggedTop","subtitle","narrow","secondaryIcon","multiline","handler","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","selectCurrentLimit","currentFirstName","currentLastName","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","s","renderPurchaseLink","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","openLimitReachedModal","sortChatFolders","orderedFolderIds","dragOrderIds","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","ALL_FOLDER_ID","getFolderDescriptionText","handleCreateFolderFromRecommended","canCreateNewFolder","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","LOCAL_TGS_URLS","isBlocked","inactive","isStatic","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","mode","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","renderChatType","isTouched","maxChats","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","onFilterChange","chatTypes","shouldMinimize","handleItemClick","newSelectedIds","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","messageTextSize","messageSendKeyCombo","timeFormat","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","handleMessageTextSizeChange","newSize","documentElement","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","RadioGroup","selected","wallpaper","localMediaHash","thumbRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","privacy","blocked","passcode","hasPasscode","blockedCount","totalCount","webAuthCount","activeWebSessions","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyVoiceMessages","voiceMessages","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","updateGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleVoiceMessagesClick","handleUpdateContentSettings","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","allowDisabledClick","rightElement","languages","language","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","langCode","setLanguage","currentLangCode","shortLangCode","substr","nativeName","buildOptions","loadingOption","getPrivacyKey","screen","selectedFile","setSelectedFile","handleAvatarCrop","croppedImg","handleModalClose","accept","CropModal","file","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","membersCount","handleVisibilityChange","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","terminateWebAuthorization","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","blockedIds","userSearch","setUserSearchQuery","blockContact","query","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","isPrivate","userOrChat","userMainUsername","renderContact","AnimatedIconWithPreview","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","animatedEmoji","selectAnimatedEmoji","shouldConfirm","focusDelayTimeoutMs","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","newValue","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","filterPlaceholder","searchInputId","config","selectedReaction","defaultReaction","setDefaultReaction","availableReaction","isInactive","emoticon","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","DEFAULT_REACTION_SIZE","addedSetIds","customEmojiSetIds","shouldSuggestStickers","openStickerSet","stickerSettingsRef","handleStickerSetClick","handleSuggestStickersChange","handleShouldLoopStickersChange","stickerSets","shouldSuggestCustomEmoji","handleSuggestCustomEmojiChange","customEmojiSets","nonInteractive","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","isForumPanelOpen","onTopicSearch","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","onTransitionEnd","ChatList","folderType","ForumPanel","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","previewIndex","chosen","onToggleReaction","selectAnimation","activate","deactivate","isAnimationLoaded","markAnimationLoaded","shouldRenderStatic","shouldRenderAnimated","onMouseEnter","enabledReactions","currentReactions","maxUniqueReactions","itemsScrollRef","handleWheel","cancelable","reactionsToRender","canSendReaction","userReactionIndexes","chosenReactions","chosenOrder","findIndex","onWheelCapture","onTouchMove","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canRevote","canClosePoll","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentUsers","hasCustomEmoji","onReply","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onCopyMessages","onAboutAds","onSponsoredHide","openCustomEmojiSets","menuRef","scrollableRef","withReactions","isSponsoredMessage","markIsReady","unmarkIsReady","handleAfterCopy","handleOpenCustomEmojiSets","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","execCommand","clipboardText","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","MenuSeparator","Skeleton","inline","withWrap","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isScheduled","isLocal","isMessageLocal","isChatGroup","isOwnMessage","isAction","isActionMessage","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","every","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","requestCalendar","calendar","useSchedule","recentReactions","uniqueReactors","msg","handleReport","closeMenu","closePinModal","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","getChatMessageLink","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","reportMessageIds","scheduledMaxDate","handleAboutAdsOpen","handleSponsoredHide","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","canSendStickers","shouldSchedule","selectShouldSchedule","prevStickerSet","renderingStickerSet","isAdded","isScheduleRequested","isPreloadedGlobally","shouldUpdateStickerSetsOrder","handleButtonClick","suffix","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","customEmojiSet","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","selectChatBot","canGiftPremium","canCreateTopic","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","isTopic","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","withExtraActions","withForumActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestMasterAndRequestCall","toggleStatistics","openGiftPremiumModal","openChatWithInfo","openCreateTopicPanel","openEditTopicPanel","isViewGroupInfoShown","usePrevDuringAnimation","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleCreateTopicClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleSearch","handleStatisticsClick","handleSelectMessages","handleOpenAsMessages","botButtons","cmd","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","handleCloseLocalTextSearch","SearchInput","getDayStartAt","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","findInViewport","selectorOrElements","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","BLUR_CANVAS_SIZE","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","File","filename","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","members","keywords","customEmojiForEmoji","forEmoji","captionLimit","attachments","getHtml","canShowCustomSendMenu","shouldSuggestCompression","isForCurrentMessageList","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","useDerivedState","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","isMultiple","isBottomDividerShown","renderHeader","noBackdropClose","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","uniqueId","SymbolMenuButton","isAttachmentModal","MessageInput","isAttachmentModalInput","editableInputId","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","onSendSchedule","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","substring","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","renderQuizNoOptionError","hidden","native","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","category","allEmojis","useOnIntersect","emojisPerRow","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","shouldRenderContent","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","favorite","premiumSet","recentStickers","premiumStickers","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","addedPremiumStickers","hasEffect","flat","totalPremiumStickers","uniqueByField","fullSet","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","preventMessageInputBlurWithBubbling","preload","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","CustomEmoji","Stickers","GIFs","SYMBOL_MENU_TAB_ICONS","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","loadPremiumSetStickers","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","recentCustomEmojisRef","documentId","handleCustomEmojiSelect","renderContent","mobileClassName","withPortal","onMouseLeave","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","prevStickers","displayedStickers","customEmoji","clearCustomEmojiForEmoji","ce","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","withSharedAnimation","shouldPreloadPreview","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","noShowPremium","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","renderedIsGallery","handleSendPm","param","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","noFake","messagesById","handleSearchTextMessagesLocal","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","shouldPlay","selectShouldLoopStickers","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","loadFeaturedStickers","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","callApi","zoomOutLabel","recentTopMessages","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","ICON_SIZE","createTopicPanel","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","prev","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","noLoopLimit","editTopicPanel","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","management","deleteContact","closeManagement","uploadContactProfilePhoto","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","isSuggestRef","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","handleSelectAvatar","isSuggest","canSetPersonalPhoto","personalPhoto","notPersonalPhoto","withFullInfo","noPersonalPhoto","GROUP_TITLE_EMPTY","limitReachedModal","hasLinkedChannel","isBasicGroup","invites","canEditForum","canChangeInfo","canBanUsers","canInvite","exportedInvites","isChannelsPremiumLimitReached","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleForum","currentTitle","currentAbout","imageHash","isPublicGroup","isChatPublic","isPreHistoryHiddenCheckboxRef","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","checkbox","chatReactionsDescription","enabledLength","allowed","totalLength","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembersById","handleDeleteGroup","isForForum","joinRequests","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","manageTopics","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","isChannelPublic","selectManagement","maxPublicLinks","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleRecentActionsClick","canAddNewAdmins","adminRights","addAdmins","adminMembers","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","manageCall","anonymous","areParticipantsHidden","noAdmins","toggleParticipantsHidden","deletingUserId","setDeletingUserId","adminIds","shouldUseSearchResults","listedIds","handleDeleteMembersModalClose","handleToggleParticipantsHidden","noScrollRestore","memberId","DeleteMemberModal","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","getInviteIconClass","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","openCalendar","closeCalendar","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","importer","renderImporters","requester","renderRequesters","hideChatJoinRequest","fullName","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","hasArrow","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","shippingOptions","handleShippingSelect","invoice","prices","shippingPrices","checkoutInfo","totalPrice","isTosAccepted","onAcceptTos","hasShippingOptions","savedCredentials","setPaymentStep","isInteractive","isRecurring","recurringTermsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","handleShippingAddressClick","handleShippingMethodClick","forceAspectRatio","renderPaymentItem","tip","renderCheckoutItem","customIcon","langStringSplit","renderTosLink","main","endsWith","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","noRedirect","onNewCardClick","passwordHint","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","general","smartGlocalToken","stripeId","passwordValidUntil","validUntil","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","paymentState","paymentDispatch","setIsTosAccepted","twoFaPassword","setTwoFaPassword","canRenderFooter","setStep","nextStep","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","shouldFillRequestedData","modalHeader","isSubmitDisabled","getIsSubmitDisabled","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","handleFirstMonkeyLoad","playSegment","croppedBlobUrl","setCroppedBlobUrl","URL","revokeObjectURL","createObjectURL","labelClassName"],"sourceRoot":""}