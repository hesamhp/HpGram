{"version":3,"file":"8422.5e1db1bca5bc32789d02.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ApiChat, ApiUser, ApiError, ApiChatMember,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { NewChatMembersProgress, ChatCreationProgress, ManagementProgress } from '../../../types';\nimport type {\n  GlobalState, ActionReturnType, TabArgs,\n} from '../../types';\n\nimport {\n  ARCHIVED_FOLDER_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  CHAT_LIST_LOAD_SLICE,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TMP_CHAT_ID,\n  ALL_FOLDER_ID,\n  DEBUG,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n  TME_WEB_DOMAINS,\n} from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  replaceThreadParam,\n  updateChatListIds,\n  updateChats,\n  updateChat,\n  updateChatListSecondaryInfo,\n  updateManagementProgress,\n  leaveChat,\n  replaceUsers,\n  replaceUserStatuses,\n  replaceChats,\n  replaceChatListIds,\n  addChatMembers,\n  updateUser,\n  addMessages,\n  updateTopics,\n  deleteTopic,\n  updateTopic,\n  updateThreadInfo,\n  updateListedTopicIds,\n} from '../../reducers';\nimport {\n  selectChat, selectUser, selectChatListType, selectIsChatPinned,\n  selectChatFolder, selectSupportChat, selectChatByUsername,\n  selectCurrentMessageList, selectThreadInfo, selectCurrentChat, selectLastServiceNotification,\n  selectVisibleUsers, selectUserByPhoneNumber, selectDraft, selectThreadTopMessageId,\n  selectTabState, selectThread,\n} from '../../selectors';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport {\n  isChatSummaryOnly,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n} from '../../helpers';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport * as langProvider from '../../../util/langProvider';\nimport { selectCurrentLimit } from '../../selectors/limits';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, threadId = MAIN_THREAD_ID,\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  // Please telegram send us some updates about linked chat 🙏\n  if (chat?.lastMessage?.repliesThreadInfo) {\n    actions.requestThreadInfoUpdate({\n      chatId: chat.lastMessage.repliesThreadInfo.chatId,\n      threadId: chat.lastMessage.repliesThreadInfo.threadId,\n    });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      actions.requestThreadInfoUpdate({ chatId: id, threadId });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, messageId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  actions.focusMessage({\n    chatId, threadId, messageId, tabId,\n  });\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType as 'active' | 'archived';\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.joinDate;\n  };\n\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n\n    await loadChats(global,\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true);\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, force, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (force) {\n    loadFullChat(global, actions, chat, tabId);\n  } else {\n    runDebouncedForLoadFullChat(() => loadFullChat(global, actions, chat, tabId));\n  }\n});\n\naddActionHandler('loadTopChats', (global): ActionReturnType => {\n  runThrottledForLoadTopChats(() => loadChats(global, 'active'));\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMuted, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  await callApi('editChatFolder', {\n    id: maxId + 1,\n    folderUpdate: {\n      id: maxId + 1,\n      ...newFolder,\n    },\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    openChatByUsername: openChatByUsernameAction,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const startAttach = params.hasOwnProperty('startattach') && !params.startattach ? true : params.startattach;\n  const choose = parseChooseParameter(params.choose);\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n  } else if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = `-${chatOrChannelPostId}`;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    focusMessage({\n      chatId,\n      messageId,\n      tabId,\n    });\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if (startAttach && choose) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach,\n      attach: params.attach,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!commentId) {\n    if (!startAttach && messageId && !startParam && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    await openChatByUsername(global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId);\n    return;\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global, tabId) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && messageId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!messageId) return;\n\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  global = getGlobal();\n\n  const threadInfo = selectThreadInfo(global, chatByUsername.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat: chatByUsername, threadId: messageId });\n    if (!result) return;\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    setGlobal(global);\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n    tabId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  let chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(global, actions, chat, tabId);\n    global = getGlobal();\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id, tabId });\n    return;\n  }\n\n  global = updateChat(global, chat.id, {\n    fullInfo: {\n      ...chat.fullInfo,\n      isPreHistoryHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(global, actions, chat, tabId);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id, tabId });\n  }\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const chatAfterUpdate = selectChat(global, chatId);\n\n  if (!chatAfterUpdate || !chatAfterUpdate.fullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = chatAfterUpdate.fullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(members && isBanned && {\n        members: members.filter((m) => m.userId !== userId),\n      }),\n      ...(members && !isBanned && {\n        members: members.map((m) => (\n          m.userId === userId\n            ? { ...m, bannedRights }\n            : m\n        )),\n      }),\n      ...(isUnblocked && kickedMembers && {\n        kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n      }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  let chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(global, actions, chat, tabId);\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id, tabId });\n  }\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  global = getGlobal();\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chatAfterUpdate.fullInfo,\n      ...(newAdminMembersById && { adminMembersById: newAdminMembersById }),\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    chat.fullInfo && chat.fullInfo.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, {\n    avatarHash: undefined,\n    fullInfo: {\n      ...chat.fullInfo,\n      profilePhoto: undefined,\n    },\n  });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, {\n      avatarHash: undefined,\n      fullInfo: {\n        ...chat.fullInfo,\n        profilePhoto: undefined,\n      },\n    });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId });\n  actions.loadProfilePhotos({ profileId: chatId });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  let chat = selectChat(global, chatId);\n  if (!channel || !chat) {\n    return;\n  }\n\n  if (isChatBasicGroup(chat)) {\n    chat = await migrateChat(global, actions, chat, tabId);\n\n    if (!chat) {\n      return;\n    }\n\n    actions.openChat({ id: chat.id, tabId });\n  }\n\n  let { fullInfo } = chat;\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, {\n      fullInfo: {\n        ...chat.fullInfo,\n        isPreHistoryHidden: false,\n      },\n    });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  let chat: ApiChat | undefined;\n  if (channel.fullInfo?.linkedChatId) {\n    chat = selectChat(global, channel.fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = (chat.fullInfo?.members?.length) || undefined;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft?.formattedText);\n    global = replaceThreadParam(global, chatId, Number(threadId), 'replyingToId', draft?.replyingToId);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsForum = chat.isForum;\n  global = updateChat(global, chatId, { isForum: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleForum', { chat, isEnabled });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, { isForum: prevIsForum });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = chat.fullInfo?.areParticipantsHidden;\n\n  global = updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      areParticipantsHidden: isEnabled,\n    },\n  });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      fullInfo: {\n        ...chat.fullInfo,\n        areParticipantsHidden: prevIsEnabled,\n      },\n    });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openChat({\n      id: chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('deleteTopic', { chat, topicId });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\nasync function loadChats<T extends GlobalState>(\n  global: T,\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  global = getGlobal();\n  const lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    lastLocalServiceMessage,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  if (shouldReplace && listType === 'active') {\n    // Always include service notifications chat\n    if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const result2 = await callApi('fetchChat', {\n        type: 'user',\n        user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      });\n\n      global = getGlobal();\n\n      const notificationsChat = result2 && selectChat(global, result2.chatId);\n      if (notificationsChat) {\n        chatIds.unshift(notificationsChat.id);\n        result.chats.unshift(notificationsChat);\n        if (lastLocalServiceMessage) {\n          notificationsChat.lastMessage = lastLocalServiceMessage;\n        }\n      }\n    }\n\n    const tabStates = Object.values(global.byTabId);\n    const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n      const currentChat = selectCurrentChat(global, tabId);\n      return currentChat ? [currentChat] : [];\n    });\n\n    const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n      return selectVisibleUsers(global, tabId) || [];\n    });\n\n    if (global.currentUserId && global.users.byId[global.currentUserId]) {\n      visibleUsers.push(global.users.byId[global.currentUserId]);\n    }\n\n    global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else if (shouldReplace && listType === 'archived') {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  const idsToUpdateReplyingToId = isFullDraftSync ? result.chatIds : Object.keys(result.replyingToById);\n  idsToUpdateReplyingToId.forEach((chatId) => {\n    const replyingToById = result.replyingToById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!replyingToById && !thread) return;\n\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToById,\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  global = updateChat(global, chat.id, {\n    fullInfo,\n    ...(membersCount && { membersCount }),\n  });\n\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  if (stickerSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  setGlobal(global);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n    setGlobal(global);\n  }\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: number,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string | boolean,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      ...(typeof startAttach === 'string' && { startParam: startAttach }),\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id, threadId, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectTabState, selectUser,\n} from '../../selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\nimport type { ApiGroupCall } from '../../../api/types';\nimport type {\n  CallSound, ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\n\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { getMainUsername } from '../../helpers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport * as langProvider from '../../../util/langProvider';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\n// Workaround for Safari not playing audio without user interaction\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\n\nlet sounds: Record<CallSound, HTMLAudioElement>;\nlet initializationPromise: Promise<void> | undefined = Promise.resolve();\n\nexport const initializeSoundsForSafari = () => {\n  if (!initializationPromise) return Promise.resolve();\n\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n\n  initializationPromise = Promise.all(Object.values(sounds).map((sound) => {\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play().then(() => {\n      sound.pause();\n      sound.volume = 1;\n      sound.currentTime = 0;\n      sound.muted = false;\n    });\n  })).then(() => {\n    initializationPromise = undefined;\n  });\n\n  return initializationPromise;\n};\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let { inviteLink } = chat.fullInfo!;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload!;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) return;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  await initializeSoundsForSafari();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall?.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash)) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  if (initializationPromise) {\n    initializationPromise.then(doPlay);\n  } else {\n    doPlay();\n  }\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', async (global, actions, payload): Promise<void> => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  await initializeSoundsForSafari();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\nimport type { ApiGroupCall } from '../../api/types';\nimport { selectGroupCall } from '../selectors/calls';\nimport { omit } from '../../util/iteratees';\nimport { updateChat } from './chats';\nimport { selectChat } from '../selectors';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChat(global, groupCall.chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          groupCallId: undefined,\n        },\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_MOCK","id","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","phoneNumber","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","async","loadChats","global","listType","offsetId","offsetDate","shouldReplace","isFullDraftSync","getGlobal","lastLocalServiceMessage","selectLastServiceNotification","message","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","chatIds","length","shift","includes","result2","user","notificationsChat","selectChat","chatId","unshift","chats","lastMessage","tabStates","Object","values","byTabId","visibleChats","flatMap","tabId","currentChat","selectCurrentChat","visibleUsers","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","updateChatListIds","updateChatListSecondaryInfo","idsToUpdateDraft","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","idsToUpdateReplyingToId","replyingToById","isFullyLoaded","setGlobal","loadFullChat","actions","chat","getCurrentTabId","fullInfo","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","undefined","participantsCount","updateChat","stickerSet","loadStickers","stickerSetInfo","migrateChat","error","openLimitReachedModal","showDialog","data","hasErrorKey","fetchChatByUsername","username","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","selectUser","isBot","isUserBot","bot","showNotification","langProvider","openAttachMenuFromLink","attach","startAttach","callAttachBot","startParam","addActionHandler","preloadedChatIds","Set","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","selectCurrentMessageList","filter","Boolean","nextChatId","getOrderedIds","ALL_FOLDER_ID","find","has","add","loadViewportMessages","threadId","payload","hasUnreadMark","toggleChatUnread","repliesThreadInfo","requestThreadInfoUpdate","isChatSummaryOnly","requestChatUpdate","selectThreadTopMessageId","chatFullInfo","linkedChatId","openChat","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","TMP_CHAT_ID","onReplace","getOrderDate","date","joinDate","DEBUG","console","connectionState","authState","listIds","oldestChat","selectIsChatPinned","sort","chat1","chat2","force","lastLocalMessage","isMuted","topicId","updateTopic","title","about","photo","memberIds","createdChannel","updateTabState","chatCreation","progress","ChatCreationProgress","channelId","selectTabState","userId","leaveChat","createdChat","e","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","orderedPinnedIds","isChatArchived","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","Math","max","recommendedId","description","newFolder","folderIds","unreadCount","lastTopicMessageId","topics","lastMessageId","updateThreadInfo","lastReadInboxMessageId","hash","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","openPreviousChat","replace","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","openChatByUsername","openChatByUsernameAction","match","RE_TG_LINK","processDeepLink","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasOwnProperty","startattach","choose","parseChooseParameter","substr","shortName","chatOrChannelPostId","Number","commentId","comment","text","formatShareText","inviteHash","voicechat","livestream","slug","substring","start","usernames","c","channelPostId","isCurrentChat","startBot","botId","param","usernameChat","threadInfo","selectThreadInfo","chatByUsername","discussionChatId","isEnabled","isChatBasicGroup","isPreHistoryHidden","bannedRights","chatAfterUpdate","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","avatarHash","profilePhoto","loadProfilePhotos","profileId","photosToDelete","nextPhoto","photos","groups","addedById","reduce","group","isForum","addChats","forDiscussionIds","channel","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","isProtected","enabledReactions","settings","isChatSuperGroup","isChatChannel","forumPanelChatId","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","addMessages","messages","updateTopics","count","updateListedTopicIds","entries","formattedText","replyingToId","readInboxMessageIdByTopicId","shouldCloseChatOnError","prevIsForum","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","audioElement","audioContext","sounds","initializationPromise","resolve","initializeSoundsForSafari","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","sound","muted","volume","play","then","currentTime","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","checkNavigatorUserMediaPermissions","isVideo","navigator","mediaDevices","getUserMedia","video","stream","getVideoTracks","checkMicrophonePermission","catch","audio","getAudioTracks","isCallPanelVisible","subscribed","peer","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","enabled","silence","safePlay","createAudioElement","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","doPlay","state","participantId","adminId","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}